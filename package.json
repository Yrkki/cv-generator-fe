{
    "name": "cv-generator-fe",
    "version": "0.7.0",
    "license": "MIT",
    "scripts": {
        "// TOOLS": ":",
        "build:plain": "bash ./launch ' npm-run-all build '",
        "test:once": "bash ./launch ' npm-run-all test-once '",
        "test:plain": "bash ./launch ' npm-run-all test '",
        "start:plain": "bash ./launch ' npm-run-all start '",
        "START-PIPELINE": "bash ./launch ' npm-run-all PIPELINE '",
        "START-dev": "bash ./launch ' npm-run-all dev '",
        "START-build": "bash ./launch ' npm-run-all dev:build '",
        "START-test": "bash ./launch ' npm-run-all dev:test '",
        "START-ops": "bash ./launch ' npm-run-all ops '",
        "START-start": "bash ./launch ' npm-run-all ops:run '",
        "ng": "ng",
        "ver": "bash ./launch ' ng version && echo Node, NPM, NVM and Git version: && node -v && npm -v && nvm v && git --version '",
        "heroku-config": "bash ./launch ' heroku config '",
        "monitor:prometheus": "prometheus",
        "monitor:graphana": "docker run -p 3000:3000 grafana/grafana",

        "// PLAN": ":",
        "dev:plan:plan:report:action": "npm-run-all sys-info:* report-goal",
        "sys-info:heroku": "bash ./launch ' if [ \"$HEROKU\" ] ; then npm run heroku-config | grep -v _TOKEN ; fi && if [ \"$HEROKU\" ] ; then env | grep -F HEROKU | grep -Fv _TOKEN ; fi '",
        "sys-info:appveyor": "bash ./launch ' if [ \"$APPVEYOR\" ] ; then env | grep -F APPVEYOR | grep -Fv _TOKEN ; fi '",
        "sys-info:travis": "bash ./launch ' if [ \"$TRAVIS\" ] ; then env | grep -F TRAVIS | grep -Fv _TOKEN ; fi '",
        "sys-info:angular": "bash ./launch ' if [ \"$ANGULAR\" ] ; then env | grep -F ANGULAR | grep -Fv _TOKEN ; fi '",
        "sys-info:node": "bash ./launch ' if [ \"$NODE\" ] ; then env | grep -F NODE | grep -Fv _TOKEN ; fi '",
        "sys-info:npm": "bash ./launch ' if [ \"$NPM\" ] ; then env | grep -F NPM | grep -Fv _TOKEN ; fi '",
        "sys-info:nvm": "bash ./launch ' if [ \"$NVM\" ] ; then env | grep -F NVM | grep -Fv _TOKEN ; fi '",
        "report-goal": "bash ./launch ' echo Plan: Include a full SD process in CI/CD pipeline '",
        "dev:plan:update:report:action": "if [ ! \"$CI\" ] ; then npm-run-all update-packages:* ; fi",
        "off:update-packages:npm-outdated": "bash ./launch ' npm outdated '",
        "off:update-packages:npm-update-save-dev": "bash ./launch ' npm update --save-dev '",
        "off:update-packages:npm-update-save": "bash ./launch ' npm update --save '",
        "off:update-packages:ng-update-all": "bash ./launch ' ng update --all --allowDirty --force '",
        "update-packages:ng-update": "bash ./launch ' ng update '",
        "update-packages:npx-npm-check-updates-u": "bash ./launch ' npx npm-check-updates -u -x typescript '",
        "deprecated:update-packages": "bash ./launch ' node wipe-dependencies.js && rm -rf node_modules && npm update --save-dev && npm update --save '",
        "update-packages:report": "bash ./launch ' echo Update: TODO: Update the dependencies to latest '",

        "// CODE": ":",
        "dev:code:code:report:action": "echo TODO: Code: Implement the new features planned",

        "// BUILD": ":",
        "dev:build:install:prepare:action": "if [ \"$CI\" ] ; then echo snyk auth $SNYK_TOKEN ; fi",
        "snyk-protect": "bash ./launch ' echo snyk protect '",
        "prepare": "bash ./launch ' npm-run-all snyk-protect '",
        "dev:build:install:package:package:action": "npm install",
        "dev:build:install:report:action": "echo Install: TODO: Link to install logs",
        "postinstall": "bash ./launch ' ngcc '",
        "dev:build:build:package:action": "if [ \"$CI\" ] ; then npm run build-ci ; else npm run build ; fi",
        "build": "bash ./launch ' if [ \"$CI\" ] ; then npm run PIPELINE ; else ng build ; fi '",
        "build-prod": "bash ./launch ' ng build --configuration=\"production\" '",
        "build-ci": "bash ./launch ' ng build --configuration=\"heroku\" '",
        "rebuild-heroku": "bash ./launch ' git commit --allow-empty -m \"empty commit\" && git push heroku master '",
        "version": "bash ./launch ' auto-changelog -p && git add CHANGELOG.md '",
        "dev:build:build:report:action": "echo Build: TODO: Link to Build logs",

        "// TEST": ":",
        "dev:test:test:package:vulnerability:action": "npm-run-all vulnerability-check",
        "vulnerability-check": "bash ./launch ' echo snyk test '",
        "dev:test:test:package:unit:action": "npm-run-all test-once",
        "test-once": "bash ./launch ' env singleRun=true ng test --code-coverage '",
        "test": "if [ ! \"$TRAVIS\" ] && [ ! \"$HEROKU\" ] ; then ng test --code-coverage ; fi",
        "dev:test:test:package:integration:action": "npm-run-all e2e",
        "e2e": "bash ./launch ' if [ ! \"$HEROKU\" ] ; then ng e2e ; fi '",
        "dev:test:test:measure:action": "npm-run-all lint",
        "lint": "bash ./launch ' ng  lint '",
        "dev:test:codecover:package:action": "npm-run-all codecov coveralls",
        "codecov": "bash ./launch ' npm-run-all codecov:* '",
        "codecov:env": "bash ./launch ' bash <(curl -s https://codecov.io/env) '",
        "codecov:method1": "bash ./launch ' if [ \"$APPVEYOR\" ] ; then codecov ; fi '",
        "codecov:method2": "bash ./launch ' if [ ! \"$APPVEYOR\" ] ; then bash <(curl -s https://codecov.io/bash) ; fi '",
        "coveralls": "bash ./launch ' node ./node_modules/coveralls/bin/coveralls.js < ./coverage/lcov.info '",
        "dev:test:document:package:action": "npm-run-all compodoc",
        "compodoc": "bash ./launch ' compodoc -p src/tsconfig.compodoc.json --theme vagrant --hideGenerator --disableSourceCode --disablePrivate --disableTemplateTab --customFavicon \"./src/favicon/android-chrome-512x512.png\" -n \"CV Generator Documentation\" '",
        "dev:test:integrate:package:action": "npm-run-all ngsw-config ngsw-copy favicon-copy google-copy manifest-copy cov-copy doc-copy logs-copy",
        "ngsw-config": "bash ./launch ' if [ \"$production\" ] ; then node_modules/.bin/ngsw-config dist src/ngsw-config.json ; fi '",
        "ngsw-copy": "bash ./launch ' if [ \"$production\" ] ; then cp node_modules/@angular/service-worker/ngsw-worker.js dist/ ; fi '",
        "favicon-copy": "bash ./launch ' cp src/favicon/* dist/favicon/ '",
        "google-copy": "bash ./launch ' cp src/google/*.* dist/ '",
        "manifest-copy": "bash ./launch ' cp src/manifest.json dist/ '",
        "cov-copy": "bash ./launch ' cp -r coverage dist/coverage/ '",
        "doc-copy": "bash ./launch ' cp -r documentation dist/documentation/ '",
        "logs-copy": "bash ./launch ' cp -r logs dist/logs/ '",

        "// RELEASE": ":",

        "// CONFIGURE": ":",
        "ops:deploy:package:dockerize:build:action": "echo npm-run-all dockerize-build",
        "dockerize-build": "bash ./launch ' docker image build -t jorich/cv-generator-fe:%npm_package_version% -t jorich/cv-generator-fe . '",
        "ops:deploy:package:dockerize:push:action": "echo npm-run-all dockerize-push",
        "dockerize-push": "bash ./launch ' docker push jorich/cv-generator-fe:%npm_package_version% && docker push jorich/cv-generator-fe:latest '",
        "ops:deploy:package:provision:action": "echo npm-run-all provision",
        "provision": "bash ./launch ' cd ../cv-generator-life-terraform && terraform apply '",

        "// OPERATE": ":",
        "ops:run:platform:action": "npm-run-all wake-up-the-dynos:*",
        "wake-up-the-dynos:heroku": "bash ./launch ' if [ ! \"$HEROKU\" ] ; then curl https://cv-generator-fe.herokuapp.com/Webpage ; fi '",
        "wake-up-the-dynos:ml": "bash ./launch ' if [ ! \"$CI\" ] ; then curl cvgenerator.ml ; fi '",
        "start": "node server.js",

        "// OBSERVE": ":",
        "ops:monitor:report:action": "echo Observe: TODO: Launch the observability dashboard",

        "pipeline:start:action": "npm-run-all pipeline:start:action:*",
        "pipeline:start:action:report": "echo CI/CD pipeline START",

        "pipeline:finish:action": "npm-run-all pipeline:finish:action:*",
        "pipeline:finish:action:logs-copy": "npm-run-all logs-copy",
        "pipeline:finish:action:report": "echo CI/CD pipeline FINISH",

        "PIPELINE": "bash ./launch ' mkdir -p ./logs && npm-run-all pipeline:start dev ops pipeline:finish 2>&1 | tee ./logs/PIPELINE.txt '",
        "pipeline:start": "bash ./launch ' mkdir -p ./logs && npm-run-all pipeline:start:action 2>&1 | tee ./logs/pipeline_start.txt '",
        "dev": "bash ./launch ' mkdir -p ./logs && npm-run-all dev:* 2>&1 | tee ./logs/dev.txt '",
        "dev:plan": "bash ./launch ' mkdir -p ./logs && npm-run-all dev:plan:* 2>&1 | tee ./logs/dev_plan.txt '",
        "dev:plan:plan": "bash ./launch ' npm-run-all dev:plan:plan:* '",
        "dev:plan:plan:report": "bash ./launch ' npm-run-all dev:plan:plan:report:action '",
        "dev:plan:update": "bash ./launch ' npm-run-all dev:plan:update:* '",
        "dev:plan:update:report": "bash ./launch ' npm-run-all dev:plan:update:report:action '",
        "dev:code": "bash ./launch ' mkdir -p ./logs && npm-run-all dev:code:* 2>&1 | tee ./logs/dev_code.txt '",
        "dev:code:code": "bash ./launch ' npm-run-all dev:code:code:* '",
        "dev:code:code:report": "bash ./launch ' npm-run-all dev:code:code:report:action '",
        "dev:build": "bash ./launch ' mkdir -p ./logs && npm-run-all dev:build:* 2>&1 | tee ./logs/dev_build.txt '",
        "dev:build:install": "bash ./launch ' npm-run-all dev:build:install:* '",
        "dev:build:install:prepare": "bash ./launch ' npm-run-all dev:build:install:prepare:action '",
        "dev:build:install:package": "bash ./launch ' npm-run-all dev:build:install:package:* '",
        "dev:build:install:package:environment": ":",
        "dev:build:install:package:package": "bash ./launch ' npm-run-all dev:build:install:package:package:action '",
        "dev:build:install:report": "bash ./launch ' npm-run-all dev:build:install:report:action '",
        "dev:build:build": "bash ./launch ' npm-run-all dev:build:build:* '",
        "dev:build:build:package": "bash ./launch ' npm-run-all dev:build:build:package:action '",
        "dev:build:build:report": "bash ./launch ' npm-run-all dev:build:build:report:action '",
        "dev:test": "bash ./launch ' mkdir -p ./logs && npm-run-all dev:test:* 2>&1 | tee ./logs/dev_test.txt '",
        "dev:test:test": "bash ./launch ' npm-run-all dev:test:test:* '",
        "dev:test:test:package": "bash ./launch ' npm-run-all dev:test:test:package:* '",
        "dev:test:test:package:vulnerability": "bash ./launch ' npm-run-all dev:test:test:package:vulnerability:action '",
        "dev:test:test:package:unit": "bash ./launch ' npm-run-all dev:test:test:package:unit:action '",
        "dev:test:test:package:integration": "bash ./launch ' npm-run-all dev:test:test:package:integration:action '",
        "dev:test:test:measure": "bash ./launch ' npm-run-all dev:test:test:measure:action '",
        "dev:test:test:report": ":",
        "dev:test:codecover": "bash ./launch ' npm-run-all dev:test:codecover:* '",
        "dev:test:codecover:package": "bash ./launch ' npm-run-all dev:test:codecover:package:action '",
        "dev:test:codecover:report": ":",
        "dev:test:document": "bash ./launch ' npm-run-all dev:test:document:* '",
        "dev:test:document:package": "bash ./launch ' npm-run-all dev:test:document:package:action '",
        "dev:test:document:report": ":",
        "dev:test:integrate": "bash ./launch ' npm-run-all dev:test:integrate:* '",
        "dev:test:integrate:package": "bash ./launch ' npm-run-all dev:test:integrate:package:action '",
        "dev:test:integrate:copy": ":",
        "dev:test:integrate:test": ":",
        "dev:test:integrate:report": ":",
        "dev:test:report": ":",
        "dev:report": ":",
        "ops": "bash ./launch ' mkdir -p ./logs && npm-run-all ops:* 2>&1 | tee ./logs/ops.txt '",
        "ops:release": "bash ./launch ' mkdir -p ./logs && npm-run-all ops:release:* 2>&1 | tee ./logs/ops_release.txt '",
        "ops:release:package": ":",
        "ops:release:copy": ":",
        "ops:release:report": ":",
        "ops:deploy": "bash ./launch ' mkdir -p ./logs && npm-run-all ops:deploy:* 2>&1 | tee ./logs/ops_deploy.txt '",
        "ops:deploy:package": "bash ./launch ' npm-run-all ops:deploy:package:* '",
        "ops:deploy:package:dockerize": "bash ./launch ' npm-run-all ops:deploy:package:dockerize:* '",
        "ops:deploy:package:dockerize:build": "bash ./launch ' npm-run-all ops:deploy:package:dockerize:build:action '",
        "ops:deploy:package:dockerize:push": "bash ./launch ' npm-run-all ops:deploy:package:dockerize:push:action '",
        "ops:deploy:package:provision": "bash ./launch ' npm-run-all ops:deploy:package:provision:action '",
        "ops:deploy:package:orchestrate": ":",
        "ops:deploy:report": ":",
        "ops:run": "bash ./launch ' mkdir -p ./logs && npm-run-all ops:run:* 2>&1 | tee ./logs/ops_run.txt '",
        "ops:run:platform": "bash ./launch ' npm-run-all ops:run:platform:action '",
        "ops:run:package": ":",
        "ops:run:chaos": ":",
        "ops:run:report": ":",
        "ops:monitor": "bash ./launch ' mkdir -p ./logs && npm-run-all ops:monitor:* 2>&1 | tee ./logs/ops_monitor.txt '",
        "ops:monitor:platform": ":",
        "ops:monitor:package": "bash ./launch ' npm-run-all ops:monitor:package:* '",
        "ops:monitor:package:trail": "bash ./launch ' npm-run-all ops:monitor:package:trail:* '",
        "ops:monitor:package:trail:health": ":",
        "ops:monitor:package:trail:performance": ":",
        "ops:monitor:package:trail:resilience": ":",
        "ops:monitor:package:trail:security": ":",
        "ops:monitor:package:showcase": ":",
        "ops:monitor:report": "bash ./launch ' npm-run-all ops:monitor:report:action '",
        "ops:report": ":",
        "pipeline:finish": "bash ./launch ' mkdir -p ./logs && npm-run-all pipeline:finish:action 2>&1 | tee ./logs/pipeline_finish.txt '",
        "// END PIPELINE": ":"
    },
    "private": true,
    "dependencies": {
        "@angular/animations": "^9.1.11",
        "@angular/cli": "^9.1.9",
        "@angular/common": "^9.1.11",
        "@angular/compiler": "9.1.11",
        "@angular/compiler-cli": "^9.1.11",
        "@angular/core": "^9.1.11",
        "@angular/forms": "^9.1.11",
        "@angular/http": "^7.2.16",
        "@angular/platform-browser": "^9.1.11",
        "@angular/platform-browser-dynamic": "^9.1.11",
        "@angular/platform-server": "^9.1.11",
        "@angular/pwa": "^0.901.9",
        "@angular/router": "^9.1.11",
        "@angular/service-worker": "^9.1.11",
        "@tailorbrands/node-exporter-prometheus": "^2.0.6",
        "chart.js": "2.9.3",
        "compression": "^1.7.4",
        "core-js": "^3.6.5",
        "express": "^4.17.1",
        "plotly.js": "^1.54.3",
        "rxjs": "^6.5.5",
        "snyk": "^1.343.0",
        "tslint-angular": "^3.0.2",
        "typescript": "3.8.3",
        "zone.js": "^0.10.3"
    },
    "devDependencies": {
        "@angular-devkit/build-angular": "0.901.9",
        "@angular/language-service": "9.1.11",
        "@compodoc/compodoc": "^1.1.11",
        "@types/jasmine": "3.5.10",
        "@types/jasminewd2": "2.0.8",
        "@types/node": "14.0.13",
        "auto-changelog": "^2.1.0",
        "codecov": "^3.7.0",
        "codelyzer": "5.2.2",
        "coveralls": "^3.1.0",
        "enhanced-resolve": "^4.2.0",
        "jasmine-core": "3.5.0",
        "jasmine-spec-reporter": "^5.0.2",
        "karma": "5.1.0",
        "karma-chrome-launcher": "^3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-htmlfile-reporter": "^0.3.8",
        "karma-jasmine": "^3.3.1",
        "karma-jasmine-html-reporter": "1.5.4",
        "node-sass": "^4.14.1",
        "npm-run-all": "^4.1.5",
        "protractor": "7.0.0",
        "ts-node": "8.10.2",
        "tslint": "^6.1.2"
    },
    "engines": {
        "node": "14.3.0",
        "npm": "6.14.5"
    },
    "snyk": true
}
