{
    "name": "cv-generator-fe",
    "version": "0.7.0",
    "license": "MIT",
    "scripts": {
        "// TOOLS": ":",
        "ng": "ng",
        "ver": "date && time ng version && echo Node, NPM and NVM version: && node -v && npm -v && nvm v",
        "heroku-config": "date && time heroku config",
        "build:plain": "npm-run-all build",
        "build:full": "date && time npm-run-all dev:build-phase",
        "npm run": "npm-run-all test",
        "test:full": "date && time npm-run-all dev:test-phase",
        "start:plain": "npm-run-all start",
        "start:full": "date && time npm-run-all ops:run",
        "START-PIPELINE": "date && time npm-run-all PIPELINE",
        "pipeline:start:action": "echo CI/CD pipeline START",
        "pipeline:finish:action": "echo CI/CD pipeline FINISH",
        "// PLAN": ":",
        "dev:plan-phase:plan:report:action": "date && time npm-run-all sys-info:* report-goal",
        "sys-info:heroku": "if [ \"$HEROKU\" ] ; then npm run heroku-config | grep -v _TOKEN ; fi && if [ \"$HEROKU\" ] ; then env | grep -F HEROKU | grep -Fv _TOKEN ; fi",
        "sys-info:appveyor": "if [ \"$APPVEYOR\" ] ; then env | grep -F APPVEYOR | grep -Fv _TOKEN ; fi",
        "sys-info:travis": "if [ \"$TRAVIS\" ] ; then env | grep -F TRAVIS | grep -Fv _TOKEN ; fi",
        "sys-info:angular": "if [ \"$ANGULAR\" ] ; then env | grep -F ANGULAR | grep -Fv _TOKEN ; fi",
        "sys-info:node": "if [ \"$NODE\" ] ; then env | grep -F NODE | grep -Fv _TOKEN ; fi",
        "sys-info:npm": "if [ \"$NPM\" ] ; then env | grep -F NPM | grep -Fv _TOKEN ; fi",
        "sys-info:nvm": "if [ \"$NVM\" ] ; then env | grep -F NVM | grep -Fv _TOKEN ; fi",
        "report-goal": "date && time echo Plan: Include a full SD process in CI/CD pipeline",
        "dev:plan-phase:update:report:action": "date && time if [ ! \"$CI\" ] ; then npm-run-all update-packages:* ; fi",
        "off:update-packages:npm-outdated": "npm outdated",
        "off:update-packages:npm-update-save-dev": "npm update --save-dev",
        "off:update-packages:npm-update-save": "npm update --save",
        "off:update-packages:ng-update-all": "ng update --all --allowDirty --force",
        "update-packages:ng-update": "ng update",
        "update-packages:npx-npm-check-updates-u": "date && time npx npm-check-updates -u -x typescript",
        "deprecated:update-packages": "node wipe-dependencies.js && rm -rf node_modules && npm update --save-dev && npm update --save",
        "update-packages:report": "echo Update: TODO: Update the dependencies to latest",
        "// CODE": ":",
        "dev:code-phase:code:report:action": "date && time echo TODO: Code: Implement the new features planned",
        "// BUILD": ":",
        "dev:build-phase:install:prepare:action": "date && time if [ \"$CI\" ] ; then snyk auth $SNYK_TOKEN ; fi",
        "snyk-protect": "date && time snyk protect",
        "prepare": "date && time npm-run-all snyk-protect",
        "dev:build-phase:install:package:package:action": "date && time npm install",
        "dev:build-phase:install:report:action": "date && time echo Install: TODO: Link to install logs",
        "dev:build-phase:build:package:action": "date && time if [ \"$CI\" ] ; then npm run build-ci ; else npm run build ; fi",
        "build": "date && time if [ \"$CI\" ] ; then npm run PIPELINE ; else ng build ; fi",
        "build-prod": "date && time ng build --configuration=\"production\"",
        "build-ci": "date && time ng build --configuration=\"heroku\"",
        "rebuild-heroku": "date && time git commit --allow-empty -m \"empty commit\" && git push heroku master",
        "version": "date && time auto-changelog -p && git add CHANGELOG.md",
        "dev:build-phase:build:report:action": "date && time echo Build: TODO: Link to Build logs",
        "// TEST": ":",
        "dev:test-phase:test:package:vulnerability:action": "date && time npm-run-all vulnerability-check",
        "vulnerability-check": "date && time snyk test",
        "dev:test-phase:test:package:unit:action": "date && time npm-run-all test-once",
        "test-once": "date && time env singleRun=true ng test --code-coverage",
        "test": "if [ ! \"$TRAVIS\" ] && [ ! \"$HEROKU\" ] ; then ng test --code-coverage ; fi",
        "dev:test-phase:test:package:integration:action": "date && time npm-run-all e2e",
        "e2e": "date && time if [ ! \"$HEROKU\" ] ; then ng e2e ; fi",
        "dev:test-phase:test:measure:action": "date && time npm-run-all lint",
        "lint": "date && time ng  lint",
        "dev:test-phase:codecover:package:action": "date && time npm-run-all codecov coveralls",
        "codecov": "date && time codecov",
        "coveralls": "date && time node ./node_modules/coveralls/bin/coveralls.js < ./coverage/lcov.info",
        "dev:test-phase:document:package:action": "date && time npm-run-all compodoc",
        "compodoc": "date && time compodoc -p src/tsconfig.app.json --theme vagrant --hideGenerator --disableSourceCode --disablePrivate --disableTemplateTab --customFavicon \"./src/favicon/android-chrome-512x512.png\" -n \"CV Generator Documentation\"",
        "dev:test-phase:integrate:package:action": "date && time npm-run-all ngsw-config ngsw-copy favicon-copy google-copy manifest-copy cov-copy doc-copy",
        "ngsw-config": "date && time if [ \"$production\" ] ; then node_modules/.bin/ngsw-config dist src/ngsw-config.json ; fi",
        "ngsw-copy": "date && time if [ \"$production\" ] ; then cp node_modules/@angular/service-worker/ngsw-worker.js dist/ ; fi",
        "favicon-copy": "date && time cp src/favicon/* dist/favicon/",
        "google-copy": "date && time cp src/google/*.* dist/",
        "manifest-copy": "date && time cp src/manifest.json dist/",
        "cov-copy": "date && time cp -r coverage dist/coverage/",
        "doc-copy": "date && time cp -r documentation dist/documentation/",
        "// RELEASE": ":",
        "// CONFIGURE": ":",
        "ops:deploy:package:dockerize:build:action": "date && time npm-run-all dockerize-build",
        "off:dockerize-build": "date && time docker image build -t jorich/cv-generator-fe:%npm_package_version% -t jorich/cv-generator-fe .",
        "ops:deploy:package:dockerize:push:action": "date && time npm-run-all dockerize-push",
        "off:dockerize-push": "date && time docker push jorich/cv-generator-fe:%npm_package_version% && docker push jorich/cv-generator-fe:latest",
        "ops:deploy:package:provision:action": "date && time npm-run-all provision",
        "off:provision": "date && time cd ../cv-generator-life-terraform && terraform apply",
        "// OPERATE": ":",
        "ops:run:platform:action": "date && time npm-run-all wake-up-the-dynos:*",
        "wake-up-the-dynos:heroku": "date && time if [ ! \"$HEROKU\" ] ; then curl https://cv-generator-fe.herokuapp.com/Webpage ; fi",
        "wake-up-the-dynos:ml": "date && time if [ ! \"$CI\" ] ; then curl cvgenerator.ml ; fi",
        "start": "node server.js",
        "// OBSERVE": ":",
        "ops:monitor:report:action": "date && time echo Observe: TODO: Lanch the observability dashboard",
        "PIPELINE": "date && time npm-run-all pipeline:start dev ops report pipeline:finish",
        "pipeline:start": "date && time npm-run-all pipeline:start:action",
        "dev": "date && time npm-run-all dev:*",
        "dev:plan-phase": "date && time npm-run-all dev:plan-phase:*",
        "dev:plan-phase:plan": "date && time npm-run-all dev:plan-phase:plan:*",
        "dev:plan-phase:plan:report": "date && time npm-run-all dev:plan-phase:plan:report:action",
        "dev:plan-phase:update": "date && time npm-run-all dev:plan-phase:update:*",
        "dev:plan-phase:update:report": "date && time npm-run-all dev:plan-phase:update:report:action",
        "dev:code-phase": "date && time npm-run-all dev:code-phase:*",
        "dev:code-phase:code": "date && time npm-run-all dev:code-phase:code:*",
        "dev:code-phase:code:report": "date && time npm-run-all dev:code-phase:code:report:action",
        "dev:build-phase": "date && time npm-run-all dev:build-phase:*",
        "dev:build-phase:install": "date && time npm-run-all dev:build-phase:install:*",
        "dev:build-phase:install:prepare": "date && time npm-run-all dev:build-phase:install:prepare:action",
        "dev:build-phase:install:package": "date && time npm-run-all dev:build-phase:install:package:*",
        "dev:build-phase:install:package:environment": ":",
        "dev:build-phase:install:package:package": "date && time npm-run-all dev:build-phase:install:package:package:action",
        "dev:build-phase:install:report": "date && time npm-run-all dev:build-phase:install:report:action",
        "dev:build-phase:build": "date && time npm-run-all dev:build-phase:build:*",
        "dev:build-phase:build:package": "date && time npm-run-all dev:build-phase:build:package:action",
        "dev:build-phase:build:report": "date && time npm-run-all dev:build-phase:build:report:action",
        "dev:test-phase": "date && time npm-run-all dev:test-phase:*",
        "dev:test-phase:test": "date && time npm-run-all dev:test-phase:test:*",
        "dev:test-phase:test:package": "date && time npm-run-all dev:test-phase:test:package:*",
        "dev:test-phase:test:package:vulnerability": "date && time npm-run-all dev:test-phase:test:package:vulnerability:action",
        "dev:test-phase:test:package:unit": "date && time npm-run-all dev:test-phase:test:package:unit:action",
        "dev:test-phase:test:package:integration": "date && time npm-run-all dev:test-phase:test:package:integration:action",
        "dev:test-phase:test:measure": "date && time npm-run-all dev:test-phase:test:measure:action",
        "dev:test-phase:test:report": ":",
        "dev:test-phase:codecover": ":",
        "dev:test-phase:codecover:package": "date && time npm-run-all dev:test-phase:codecover:package:action",
        "dev:test-phase:codecover:report": ":",
        "dev:test-phase:document": "date && time npm-run-all dev:test-phase:document:*",
        "dev:test-phase:document:package": "date && time npm-run-all dev:test-phase:document:package:action",
        "dev:test-phase:document:report": ":",
        "dev:test-phase:integrate": "date && time npm-run-all dev:test-phase:integrate:*",
        "dev:test-phase:integrate:package": "date && time npm-run-all dev:test-phase:integrate:package:action",
        "dev:test-phase:integrate:copy": ":",
        "dev:test-phase:integrate:test": ":",
        "dev:test-phase:integrate:report": ":",
        "dev:test-phase:report": ":",
        "dev:report": ":",
        "ops": "date && time npm-run-all ops:*",
        "ops:release": "date && time npm-run-all ops:release:*",
        "ops:release:package": ":",
        "ops:release:copy": ":",
        "ops:release:report": ":",
        "ops:deploy": "date && time npm-run-all ops:deploy:*",
        "ops:deploy:package": "date && time npm-run-all ops:deploy:package:*",
        "ops:deploy:package:dockerize": "date && time npm-run-all ops:deploy:package:dockerize:*",
        "ops:deploy:package:dockerize:build": "date && time npm-run-all ops:deploy:package:dockerize:build:action",
        "ops:deploy:package:dockerize:push": "date && time npm-run-all ops:deploy:package:dockerize:push:action",
        "ops:deploy:package:provision": "date && time npm-run-all ops:deploy:package:provision:action",
        "ops:deploy:package:orchestrate": ":",
        "ops:deploy:report": ":",
        "ops:run": "date && time npm-run-all ops:run:*",
        "ops:run:platform": "date && time npm-run-all ops:run:platform:action",
        "ops:run:package": ":",
        "ops:run:chaos": ":",
        "ops:run:report": ":",
        "ops:monitor": "date && time npm-run-all ops:monitor:*",
        "ops:monitor:platform": ":",
        "ops:monitor:package": "date && time npm-run-all ops:monitor:package:*",
        "ops:monitor:package:trail": "date && time npm-run-all ops:monitor:package:trail:*",
        "ops:monitor:package:trail:health": ":",
        "ops:monitor:package:trail:performance": ":",
        "ops:monitor:package:trail:resilience": ":",
        "ops:monitor:package:trail:security": ":",
        "ops:monitor:package:showcase": ":",
        "ops:monitor:report": "date && time npm-run-all ops:monitor:report:action",
        "ops:report": ":",
        "report": ":",
        "pipeline:finish": "date && time npm-run-all pipeline:finish:action",
        "// END PIPELINE": ":"
    },
    "private": true,
    "dependencies": {
        "@angular/animations": "^9.1.11",
        "@angular/cli": "^9.1.8",
        "@angular/common": "^9.1.11",
        "@angular/compiler": "9.1.11",
        "@angular/compiler-cli": "^9.1.11",
        "@angular/core": "^9.1.11",
        "@angular/forms": "^9.1.11",
        "@angular/http": "^7.2.16",
        "@angular/platform-browser": "^9.1.11",
        "@angular/platform-browser-dynamic": "^9.1.11",
        "@angular/platform-server": "^9.1.11",
        "@angular/pwa": "^0.901.8",
        "@angular/router": "^9.1.11",
        "@angular/service-worker": "^9.1.11",
        "@compodoc/compodoc": "^1.1.11",
        "chart.js": "2.9.3",
        "compression": "^1.7.4",
        "core-js": "^3.6.5",
        "express": "^4.17.1",
        "plotly.js": "^1.54.2",
        "rxjs": "^6.5.5",
        "snyk": "^1.339.2",
        "tslint-angular": "^3.0.2",
        "typescript": "3.8.3",
        "zone.js": "^0.10.3"
    },
    "devDependencies": {
        "@angular-devkit/build-angular": "0.901.8",
        "@angular/language-service": "9.1.11",
        "@types/jasmine": "3.5.10",
        "@types/jasminewd2": "2.0.8",
        "@types/node": "14.0.13",
        "auto-changelog": "^2.0.0",
        "codecov": "^3.7.0",
        "codelyzer": "5.2.2",
        "coveralls": "^3.1.0",
        "enhanced-resolve": "^4.1.1",
        "jasmine-core": "3.5.0",
        "jasmine-spec-reporter": "^5.0.2",
        "karma": "5.1.0",
        "karma-chrome-launcher": "^3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-htmlfile-reporter": "^0.3.8",
        "karma-jasmine": "^3.3.1",
        "karma-jasmine-html-reporter": "1.5.4",
        "node-sass": "^4.14.1",
        "npm-run-all": "^4.1.5",
        "protractor": "7.0.0",
        "ts-node": "8.10.2",
        "tslint": "^6.1.2"
    },
    "engines": {
        "node": "14.3.0",
        "npm": "6.14.5"
    },
    "snyk": true
}
