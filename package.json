{
        "name": "cv-generator-fe",
        "version": "0.7.0",
        "license": "MIT",
        "scripts": {
                "// TOOLS": ":",
                "ng": "ng",
                "ver": "date && time ( ng version && echo Node, NPM and NVM version: && node -v && npm -v && nvm v )",
                "heroku-config": "date && time ( heroku config )",
                "build:plain": "date && time ( npm-run-all build )",
                "build:full": "date && time ( npm-run-all dev:build )",
                "test:once": "date && time ( npm-run-all test-once )",
                "test:plain": "date && time ( npm-run-all test )",
                "test:full": "date && time ( npm-run-all dev:test )",
                "start:plain": "date && time ( npm-run-all start )",
                "start:full": "date && time ( npm-run-all ops:run )",
                "monitor:prometheus": "prometheus",
                "monitor:graphana": "docker run -p 3000:3000 grafana/grafana",
                "START-PIPELINE": "date && time ( npm-run-all PIPELINE )",
                "pipeline:start:action": "echo CI/CD pipeline START",
                "pipeline:finish:action": "echo CI/CD pipeline FINISH",
                "// PLAN": ":",
                "dev:plan:plan:report:action": "npm-run-all sys-info:* report-goal",
                "sys-info:heroku": "date && time ( if [ \"$HEROKU\" ] ; then npm run heroku-config | grep -v _TOKEN ; fi && if [ \"$HEROKU\" ] ; then env | grep -F HEROKU | grep -Fv _TOKEN ; fi )",
                "sys-info:appveyor": "date && time ( if [ \"$APPVEYOR\" ] ; then env | grep -F APPVEYOR | grep -Fv _TOKEN ; fi )",
                "sys-info:travis": "date && time ( if [ \"$TRAVIS\" ] ; then env | grep -F TRAVIS | grep -Fv _TOKEN ; fi )",
                "sys-info:angular": "date && time ( if [ \"$ANGULAR\" ] ; then env | grep -F ANGULAR | grep -Fv _TOKEN ; fi )",
                "sys-info:node": "date && time ( if [ \"$NODE\" ] ; then env | grep -F NODE | grep -Fv _TOKEN ; fi )",
                "sys-info:npm": "date && time ( if [ \"$NPM\" ] ; then env | grep -F NPM | grep -Fv _TOKEN ; fi )",
                "sys-info:nvm": "date && time ( if [ \"$NVM\" ] ; then env | grep -F NVM | grep -Fv _TOKEN ; fi )",
                "report-goal": "date && time ( echo Plan: Include a full SD process in CI/CD pipeline )",
                "dev:plan:update:report:action": "if [ ! \"$CI\" ] ; then npm-run-all update-packages:* ; fi",
                "off:update-packages:npm-outdated": "date && time ( npm outdated )",
                "off:update-packages:npm-update-save-dev": "date && time ( npm update --save-dev )",
                "off:update-packages:npm-update-save": "date && time ( npm update --save )",
                "off:update-packages:ng-update-all": "date && time ( ng update --all --allowDirty --force )",
                "update-packages:ng-update": "date && time ( ng update )",
                "update-packages:npx-npm-check-updates-u": "date && time ( npx npm-check-updates -u -x typescript )",
                "deprecated:update-packages": "date && time ( node wipe-dependencies.js && rm -rf node_modules && npm update --save-dev && npm update --save )",
                "update-packages:report": "date && time ( echo Update: TODO: Update the dependencies to latest )",
                "// CODE": ":",
                "dev:code:code:report:action": "echo TODO: Code: Implement the new features planned",
                "// BUILD": ":",
                "dev:build:install:prepare:action": "if [ \"$CI\" ] ; then echo snyk auth $SNYK_TOKEN ; fi",
                "snyk-protect": "date && time ( echo snyk protect )",
                "prepare": "date && time ( npm-run-all snyk-protect )",
                "dev:build:install:package:package:action": "npm install",
                "dev:build:install:report:action": "echo Install: TODO: Link to install logs",
                "postinstall": "date && time ( ngcc )",
                "dev:build:build:package:action": "if [ \"$CI\" ] ; then npm run build-ci ; else npm run build ; fi",
                "build": "date && time ( if [ \"$CI\" ] ; then npm run PIPELINE ; else ng build ; fi )",
                "build-prod": "date && time ( ng build --configuration=\"production\" )",
                "build-ci": "date && time ( ng build --configuration=\"heroku\" )",
                "rebuild-heroku": "date && time ( git commit --allow-empty -m \"empty commit\" && git push heroku master )",
                "version": "date && time ( auto-changelog -p && git add CHANGELOG.md )",
                "dev:build:build:report:action": "echo Build: TODO: Link to Build logs",
                "// TEST": ":",
                "dev:test:test:package:vulnerability:action": "npm-run-all vulnerability-check",
                "vulnerability-check": "date && time ( echo snyk test )",
                "dev:test:test:package:unit:action": "npm-run-all test-once",
                "test-once": "date && time ( env singleRun=true ng test --code-coverage )",
                "test": "if [ ! \"$TRAVIS\" ] && [ ! \"$HEROKU\" ] ; then ng test --code-coverage ; fi",
                "dev:test:test:package:integration:action": "npm-run-all e2e",
                "e2e": "date && time ( if [ ! \"$HEROKU\" ] ; then ng e2e ; fi )",
                "dev:test:test:measure:action": "npm-run-all lint",
                "lint": "date && time ( ng  lint )",
                "dev:test:codecover:package:action": "npm-run-all codecov coveralls",
                "codecov": "date && time ( codecov )",
                "coveralls": "date && time ( node ./node_modules/coveralls/bin/coveralls.js < ./coverage/lcov.info )",
                "dev:test:document:package:action": "npm-run-all compodoc",
                "compodoc": "date && time ( compodoc -p src/tsconfig.app.json --theme vagrant --hideGenerator --disableSourceCode --disablePrivate --disableTemplateTab --customFavicon \"./src/favicon/android-chrome-512x512.png\" -n \"CV Generator Documentation\" )",
                "dev:test:integrate:package:action": "npm-run-all ngsw-config ngsw-copy favicon-copy google-copy manifest-copy cov-copy doc-copy",
                "ngsw-config": "date && time ( if [ \"$production\" ] ; then node_modules/.bin/ngsw-config dist src/ngsw-config.json ; fi )",
                "ngsw-copy": "date && time ( if [ \"$production\" ] ; then cp node_modules/@angular/service-worker/ngsw-worker.js dist/ ; fi )",
                "favicon-copy": "date && time ( cp src/favicon/* dist/favicon/ )",
                "google-copy": "date && time ( cp src/google/*.* dist/ )",
                "manifest-copy": "date && time ( cp src/manifest.json dist/ )",
                "cov-copy": "date && time ( cp -r coverage dist/coverage/ )",
                "doc-copy": "date && time ( cp -r documentation dist/documentation/ )",
                "// RELEASE": ":",
                "// CONFIGURE": ":",
                "ops:deploy:package:dockerize:build:action": "echo npm-run-all dockerize-build",
                "dockerize-build": "date && time ( docker image build -t jorich/cv-generator-fe:%npm_package_version% -t jorich/cv-generator-fe . )",
                "ops:deploy:package:dockerize:push:action": "echo npm-run-all dockerize-push",
                "dockerize-push": "date && time ( docker push jorich/cv-generator-fe:%npm_package_version% && docker push jorich/cv-generator-fe:latest )",
                "ops:deploy:package:provision:action": "echo npm-run-all provision",
                "provision": "date && time ( cd ../cv-generator-life-terraform && terraform apply )",
                "// OPERATE": ":",
                "ops:run:platform:action": "npm-run-all wake-up-the-dynos:*",
                "wake-up-the-dynos:heroku": "date && time ( if [ ! \"$HEROKU\" ] ; then curl https://cv-generator-fe.herokuapp.com/Webpage ; fi )",
                "wake-up-the-dynos:ml": "date && time ( if [ ! \"$CI\" ] ; then curl cvgenerator.ml ; fi )",
                "start": "node server.js",
                "// OBSERVE": ":",
                "ops:monitor:report:action": "echo Observe: TODO: Launch the observability dashboard",
                "PIPELINE": "date && time ( mkdir -p logs && npm-run-all pipeline:start dev ops pipeline:finish 2>&1 | tee logs/PIPELINE.txt )",
                "pipeline:start": "date && time ( mkdir -p logs && npm-run-all pipeline:start:action 2>&1 | tee logs/pipeline_start.txt )",
                "dev": "date && time ( mkdir -p logs && npm-run-all dev:* 2>&1 | tee logs/dev.txt )",
                "dev:plan": "date && time ( mkdir -p logs && npm-run-all dev:plan:* 2>&1 | tee logs/dev_plan.txt )",
                "dev:plan:plan": "date && time ( npm-run-all dev:plan:plan:* )",
                "dev:plan:plan:report": "date && time ( npm-run-all dev:plan:plan:report:action )",
                "dev:plan:update": "date && time ( npm-run-all dev:plan:update:* )",
                "dev:plan:update:report": "date && time ( npm-run-all dev:plan:update:report:action )",
                "dev:code": "date && time ( mkdir -p logs && npm-run-all dev:code:* 2>&1 | tee logs/dev_code.txt )",
                "dev:code:code": "date && time ( npm-run-all dev:code:code:* )",
                "dev:code:code:report": "date && time ( npm-run-all dev:code:code:report:action )",
                "dev:build": "date && time ( mkdir -p logs && npm-run-all dev:build:* 2>&1 | tee logs/dev_build.txt )",
                "dev:build:install": "date && time ( npm-run-all dev:build:install:* )",
                "dev:build:install:prepare": "date && time ( npm-run-all dev:build:install:prepare:action )",
                "dev:build:install:package": "date && time ( npm-run-all dev:build:install:package:* )",
                "dev:build:install:package:environment": ":",
                "dev:build:install:package:package": "date && time ( npm-run-all dev:build:install:package:package:action )",
                "dev:build:install:report": "date && time ( npm-run-all dev:build:install:report:action )",
                "dev:build:build": "date && time ( npm-run-all dev:build:build:* )",
                "dev:build:build:package": "date && time ( npm-run-all dev:build:build:package:action )",
                "dev:build:build:report": "date && time ( npm-run-all dev:build:build:report:action )",
                "dev:test": "date && time ( mkdir -p logs && npm-run-all dev:test:* 2>&1 | tee logs/dev_test.txt )",
                "dev:test:test": "date && time ( npm-run-all dev:test:test:* )",
                "dev:test:test:package": "date && time ( npm-run-all dev:test:test:package:* )",
                "dev:test:test:package:vulnerability": "date && time ( npm-run-all dev:test:test:package:vulnerability:action )",
                "dev:test:test:package:unit": "date && time ( npm-run-all dev:test:test:package:unit:action )",
                "dev:test:test:package:integration": "date && time ( npm-run-all dev:test:test:package:integration:action )",
                "dev:test:test:measure": "date && time ( npm-run-all dev:test:test:measure:action )",
                "dev:test:test:report": ":",
                "dev:test:codecover": "date && time ( npm-run-all dev:test:codecover:* )",
                "dev:test:codecover:package": "date && time ( npm-run-all dev:test:codecover:package:action )",
                "dev:test:codecover:report": ":",
                "dev:test:document": "date && time ( npm-run-all dev:test:document:* )",
                "dev:test:document:package": "date && time ( npm-run-all dev:test:document:package:action )",
                "dev:test:document:report": ":",
                "dev:test:integrate": "date && time ( npm-run-all dev:test:integrate:* )",
                "dev:test:integrate:package": "date && time ( npm-run-all dev:test:integrate:package:action )",
                "dev:test:integrate:copy": ":",
                "dev:test:integrate:test": ":",
                "dev:test:integrate:report": ":",
                "dev:test:report": ":",
                "dev:report": ":",
                "ops": "date && time ( mkdir -p logs && npm-run-all ops:* 2>&1 | tee logs/ops.txt )",
                "ops:release": "date && time ( mkdir -p logs && npm-run-all ops:release:* 2>&1 | tee logs/ops_release.txt )",
                "ops:release:package": ":",
                "ops:release:copy": ":",
                "ops:release:report": ":",
                "ops:deploy": "date && time ( mkdir -p logs && npm-run-all ops:deploy:* 2>&1 | tee logs/ops_deploy.txt )",
                "ops:deploy:package": "date && time ( npm-run-all ops:deploy:package:* )",
                "ops:deploy:package:dockerize": "date && time ( npm-run-all ops:deploy:package:dockerize:* )",
                "ops:deploy:package:dockerize:build": "date && time ( npm-run-all ops:deploy:package:dockerize:build:action )",
                "ops:deploy:package:dockerize:push": "date && time ( npm-run-all ops:deploy:package:dockerize:push:action )",
                "ops:deploy:package:provision": "date && time ( npm-run-all ops:deploy:package:provision:action )",
                "ops:deploy:package:orchestrate": ":",
                "ops:deploy:report": ":",
                "ops:run": "date && time ( mkdir -p logs && npm-run-all ops:run:* 2>&1 | tee logs/ops_run.txt )",
                "ops:run:platform": "date && time ( npm-run-all ops:run:platform:action )",
                "ops:run:package": ":",
                "ops:run:chaos": ":",
                "ops:run:report": ":",
                "ops:monitor": "date && time ( mkdir -p logs && npm-run-all ops:monitor:* 2>&1 | tee logs/ops_monitor.txt )",
                "ops:monitor:platform": ":",
                "ops:monitor:package": "date && time ( npm-run-all ops:monitor:package:* )",
                "ops:monitor:package:trail": "date && time ( npm-run-all ops:monitor:package:trail:* )",
                "ops:monitor:package:trail:health": ":",
                "ops:monitor:package:trail:performance": ":",
                "ops:monitor:package:trail:resilience": ":",
                "ops:monitor:package:trail:security": ":",
                "ops:monitor:package:showcase": ":",
                "ops:monitor:report": "date && time ( npm-run-all ops:monitor:report:action )",
                "ops:report": ":",
                "pipeline:finish": "date && time ( mkdir -p logs && npm-run-all pipeline:finish:action 2>&1 | tee logs/pipeline_finish.txt )",
                "// END PIPELINE": ":"
        },
        "private": true,
        "dependencies": {
                "@angular/animations": "^9.1.11",
                "@angular/cli": "^9.1.8",
                "@angular/common": "^9.1.11",
                "@angular/compiler": "9.1.11",
                "@angular/compiler-cli": "^9.1.11",
                "@angular/core": "^9.1.11",
                "@angular/forms": "^9.1.11",
                "@angular/http": "^7.2.16",
                "@angular/platform-browser": "^9.1.11",
                "@angular/platform-browser-dynamic": "^9.1.11",
                "@angular/platform-server": "^9.1.11",
                "@angular/pwa": "^0.901.8",
                "@angular/router": "^9.1.11",
                "@angular/service-worker": "^9.1.11",
                "@compodoc/compodoc": "^1.1.11",
                "@tailorbrands/node-exporter-prometheus": "^2.0.6",
                "chart.js": "2.9.3",
                "compression": "^1.7.4",
                "core-js": "^3.6.5",
                "express": "^4.17.1",
                "plotly.js": "^1.54.3",
                "rxjs": "^6.5.5",
                "snyk": "^1.342.2",
                "tslint-angular": "^3.0.2",
                "typescript": "3.8.3",
                "zone.js": "^0.10.3"
        },
        "devDependencies": {
                "@angular-devkit/build-angular": "0.901.8",
                "@angular/language-service": "9.1.11",
                "@types/jasmine": "3.5.10",
                "@types/jasminewd2": "2.0.8",
                "@types/node": "14.0.13",
                "auto-changelog": "^2.1.0",
                "codecov": "^3.7.0",
                "codelyzer": "5.2.2",
                "coveralls": "^3.1.0",
                "enhanced-resolve": "^4.2.0",
                "jasmine-core": "3.5.0",
                "jasmine-spec-reporter": "^5.0.2",
                "karma": "5.1.0",
                "karma-chrome-launcher": "^3.1.0",
                "karma-coverage-istanbul-reporter": "3.0.3",
                "karma-htmlfile-reporter": "^0.3.8",
                "karma-jasmine": "^3.3.1",
                "karma-jasmine-html-reporter": "1.5.4",
                "node-sass": "^4.14.1",
                "npm-run-all": "^4.1.5",
                "protractor": "7.0.0",
                "ts-node": "8.10.2",
                "tslint": "^6.1.2"
        },
        "engines": {
                "node": "14.3.0",
                "npm": "6.14.5"
        },
        "snyk": true
}
