{
  "name": "cv-generator-fe",
  "version": "1.52.0",
  "description": "CV generator frontend",
  "keywords": [
    "CV generator"
  ],
  "author": "Georgi Marinov",
  "homepage": "https://yrkki.github.io/cv-generator-fe/",
  "license": "Apache-2.0",
  "scripts": {
    "// TOOLS": ":",
    "build:plain": "bash ./launch \" npm-run-all build \"",
    "test:once": "bash ./launch \" npm-run-all test-once \"",
    "test:plain": "bash ./launch \" npm-run-all test \"",
    "e2e:plain": "bash ./launch \" npm-run-all e2e \"",
    "start:plain": "bash ./launch \" npm-run-all start \"",
    "open:plain": "bash ./launch \" npm-run-all open \"",
    "START-PIPELINE": "bash ./launch \" npm-run-all PIPELINE \"",
    "START-dev": "bash ./launch \" npm-run-all dev \"",
    "START-build": "bash ./launch \" npm-run-all dev:build \"",
    "START-test": "bash ./launch \" npm-run-all dev:test \"",
    "START-e2e": "bash ./launch \" npm-run-all dev:test:integrate:test \"",
    "START-ops": "bash ./launch \" npm-run-all ops \"",
    "START-start": "bash ./launch \" npm-run-all ops:run \"",
    "ng": "ng",
    "ver": "npm-run-all ver:*",
    "ver:ng": "echo $'\\033[0;32m''Angular Version:'$'\\033[0m' ; ng version",
    "ver:os": "npm run os-ver",
    "ver:node": "echo -n $'\\033[0;32m''Node: '$'\\033[0m' ; node -v",
    "ver:nvm": "bash ./launch \" echo -n $'\\033[0;32m''NVM: '$'\\033[0m' ; nvm v \"",
    "ver:git": "echo -n $'\\033[0;32m''Git: '$'\\033[0m' ; git --version",
    "ver:heroku": "echo -n $'\\033[0;32m''Heroku: '$'\\033[0m' ; heroku --version",
    "ver:npm": "npm-run-all ver:npm:*",
    "ver:npm:version": "echo -n $'\\033[0;32m''NPM: '$'\\033[0m' ; npm -v",
    "ver:npm:verbose": "echo -n $'\\033[0;32m''NPM verbose:'$'\\033[0m' ; npm version",
    "ver:npm:package": "echo -n $'\\033[0;32m''NPM package:'$'\\033[0m' ; npm v",
    "os-ver": "bash ./launch \" echo $'\\033[0;32m''OS Version:'$'\\033[0m' ; cat /etc/os-release 2>/dev/null ; lsb_release -a 2>/dev/null ; hostnamectl 2>/dev/null ; uname -r 2>/dev/null ; systeminfo | grep \"OS Name\" 2>/dev/null ; systeminfo | grep \"OS Version\" 2>/dev/null \"",
    "heroku-config": "bash ./launch \" heroku config --remote heroku \"",
    "monitor:prometheus": "prometheus --web.enable-lifecycle",
    "monitor:graphana": "docker run -p 3800:3000 grafana/grafana",
    "rain": "npx matrix-rain",
    "// PIPELINE:start": ":",
    "pipeline:start:action": "bash ./launch \" npm-run-all pipeline:start:action:* \"",
    "pipeline:start:action:report": "bash ./launch \" echo $'\\033[0;32m'CI/CD pipeline START$'\\033[0m' \"",
    "pipeline:start:action:shout": "bash ./launch \" echo && figlet -f Banner CI/CD pipeline START | sed $'s/#/\\033[0;42m \\033[m/g' && echo $'\\033[0m' \"",
    "// PLAN": ":",
    "dev:plan:plan:report:action": "bash ./launch \" npm-run-all dev:plan:plan:report:action:* \"",
    "off:dev:plan:plan:report:action:load-env": "bash ./launch \" npm-run-all load-env \"",
    "load-env": "bash ./launch \" . ./env.sh \"",
    "dev:plan:plan:report:action:sys-info": "bash ./launch \" npm-run-all sys-info:* \"",
    "sys-info:project": "bash ./launch \" env | grep -F CV_GENERATOR\"",
    "sys-info:keychain": "bash ./launch \" env | grep -e TOKEN -e KEY \"",
    "sys-info:heroku-config": "bash ./launch \" if [ ! \"$CI\" ] ; then npm-run-all heroku-config | grep -v _TOKEN ; fi \"",
    "sys-info:heroku": "bash ./launch \" if [ \"$HEROKU\" ] ; then env | grep -F HEROKU | grep -Fv _TOKEN ; fi \"",
    "sys-info:appveyor": "bash ./launch \" if [ \"$APPVEYOR\" ] ; then env | grep -F APPVEYOR | grep -Fv _TOKEN ; fi \"",
    "sys-info:circleci": "bash ./launch \" if [ \"$CIRCLECI\" ] ; then env | grep -F CIRCLECI | grep -Fv _TOKEN ; fi \"",
    "sys-info:travis": "bash ./launch \" if [ \"$TRAVIS\" ] ; then env | grep -F TRAVIS | grep -Fv _TOKEN ; fi \"",
    "sys-info:angular": "bash ./launch \" if [ \"$ANGULAR\" ] ; then env | grep -F ANGULAR | grep -Fv _TOKEN ; fi \"",
    "sys-info:node": "bash ./launch \" if [ \"$NODE\" ] ; then env | grep -F NODE | grep -Fv _TOKEN ; fi \"",
    "sys-info:npm": "bash ./launch \" if [ \"$NPM\" ] ; then env | grep -F NPM | grep -Fv _TOKEN ; fi \"",
    "sys-info:nvm": "bash ./launch \" if [ \"$NVM\" ] ; then env | grep -F NVM | grep -Fv _TOKEN ; fi \"",
    "sys-info:ver": "bash ./launch \" npm run ver \"",
    "dev:plan:plan:report:action:report-goal": "bash ./launch \" npm-run-all report-goal \"",
    "report-goal": "bash ./launch \" echo $'\\033[0;32m'Plan: Starting a full-featured DevSecOps CI/CD pipeline SD process:â€¦$'\\033[0m' \"",
    "dev:plan:update:report:action": "bash ./launch \" npm-run-all dev:plan:update:report:action:* \"",
    "dev:plan:update:report:action:override-update-packages": "bash ./launch \" if [ \"$CV_GENERATOR_OVERRIDE_UPDATE_PACKAGES\" ] ; then npm-run-all override:update-packages:* ; fi \"",
    "override:update-packages:patch": "bash ./launch \" cd ../cv-generator-life-patcher && ./patch.sh \"",
    "dev:plan:update:report:action:update-packages": "bash ./launch \" npm-run-all update-packages:* \"",
    "update-packages:npm-outdated": "bash ./launch \" npm outdated \"",
    "off:overridden:update-packages:npm-update-save": "bash ./launch \" npm update \"",
    "off:overridden:update-packages:ng-update-all": "bash ./launch \" echo y | ng update --all --allow-dirty --force \"",
    "off:overridden:update-packages:ng-update": "bash ./launch \" echo y | ng update \"",
    "overridden:update-packages:npx-npm-check-updates-u": "bash ./launch \" echo y | npx npm-check-updates --target minor --timeout 600000 -u --packageFile package.json && npm install --legacy-peer-deps \"",
    "deprecated:update-packages": "bash ./launch \" node wipe-dependencies.js && rm -rf node_modules && npm update --save-dev && npm update --save \"",
    "update-packages:report": "bash ./launch \" echo $'\\033[0;32m'Update: Updated everything to latest \\(or next\\).$'\\033[0m' \"",
    "dev:plan:report:action": "bash ./launch \" npm-run-all dev:plan:report:action:* \"",
    "dev:plan:report:action:report": "bash ./launch \" echo $'\\033[0;32m'PLAN: Planned everything.$'\\033[0m' \"",
    "dev:plan:report:action:shout": "bash ./launch \" echo && figlet -f Banner PLAN: all done | sed $'s/#/\\033[0;42m \\033[m/g' && echo $'\\033[0m' \"",
    "// CODE": ":",
    "dev:code:scaffold:generate:action": "bash ./launch \" exit ; if [ \"$(date +%u)\" -eq 4 ]; then if [ ! \"$CI\" ] ; then cd ../cv-generator-life-scaffolder/scripts && ./scaffold-generate.sh ; fi ; fi \"",
    "dev:code:scaffold:transform:action": "bash ./launch \" exit ; if [ \"$(date +%u)\" -eq 4 ]; then if [ ! \"$CI\" ] ; then cd ../cv-generator-life-scaffolder/scripts && ./scaffold-transform.sh ; fi ; fi \"",
    "dev:code:scaffold:launch:action": "bash ./launch \" exit ; if [ \"$(date +%u)\" -eq 4 ]; then if [ ! \"$CI\" ] ; then cd ../cv-generator-life-scaffolder/scripts && ./scaffold-launch.sh ; fi ; fi \"",
    "dev:code:rejuvenate:action": "bash ./launch \" exit ; if [ \"$(date +%u)\" -eq 4 ]; then if [ ! \"$CI\" ] ; then cd ../cv-generator-life-scaffolder/scripts && ./scaffold.sh ; fi ; fi \"",
    "dev:code:code:action": ":",
    "dev:code:report:action": "bash ./launch \" npm-run-all dev:code:report:action:* \"",
    "dev:code:report:action:report": "bash ./launch \" echo $'\\033[0;32m'CODE: Coded everything. Implemented the new features planned.$'\\033[0m' \"",
    "dev:code:report:action:shout": "bash ./launch \" echo && figlet -f Banner CODE: all done | sed $'s/#/\\033[0;42m \\033[m/g' && echo $'\\033[0m' \"",
    "last-commit": "curl -s -H \"Authorization: token ${CV_GENERATOR_GITHUB_TOKEN}\" -H \"Accept: application/vnd.github.VERSION.sha\" \"https://api.github.com/repos/Yrkki/cv-generator-fe/commits/master\"",
    "codeclimate-deploy": "curl -d \"token=${CV_GENERATOR_VELOCITY_DEPLOYMENT_TOKEN}\" -d \"revision=\"$(echo $(npm run last-commit) | awk '{print $NF}') -d \"repository_url=https://github.com/Yrkki/cv-generator-fe\" -d \"branch=master\" -d \"environment=heroku\" https://velocity.codeclimate.com/deploys",
    "// BUILD": ":",
    "dev:build:install:prepare:action": "bash ./launch \" if [ \"$(date +%H%M)\" -gt 2100 -a \"$(date +%H%M)\" -lt 2200 ]; then if [ $SNYK_TOKEN ] ; then npx snyk auth $SNYK_TOKEN ; else echo Snyk auth: no token ; fi ; else echo Skipping Snyk auth. ; fi \"",
    "prepare": "bash ./launch \" npm-run-all prepare:* \"",
    "prepare:snyk-protect": "bash ./launch \" if [ '' -a \"$(date +%H%M)\" -gt 2100 -a \"$(date +%H%M)\" -lt 2200 ]; then npx snyk-protect ; else echo Skipping Snyk protect \\(deprecated\\). ; fi \"",
    "dev:build:install:package:package:action": "bash ./launch \" npm install --legacy-peer-deps \"",
    "dev:build:install:package:platform:action": "bash ./launch \" npm-run-all dev:build:install:package:platform:action:* \"",
    "dev:build:install:package:platform:action:heroku": "bash ./launch \" npm-run-all dev:build:install:package:platform:action:heroku:* \"",
    "dev:build:install:package:platform:action:heroku:plugins": "bash ./launch \" npm-run-all dev:build:install:package:platform:action:heroku:plugins:* \"",
    "dev:build:install:package:platform:action:heroku:plugins:list": "bash ./launch \" heroku plugins \"",
    "dev:build:install:package:platform:action:heroku:plugins:buildpack-registry": "bash ./launch \" heroku plugins:install buildpack-registry \"",
    "dev:build:install:package:platform:action:heroku:plugins:buildpacks": "bash ./launch \" heroku plugins:install buildpacks \"",
    "dev:build:install:package:platform:action:heroku:plugins:report": "bash ./launch \" npm run dev:build:install:package:platform:action:heroku:plugins:list \"",
    "dev:build:install:package:platform:action:heroku:buildpacks": "bash ./launch \" if [ ! \"$CI\" ] ; then npm-run-all dev:build:install:package:platform:action:heroku:buildpacks:* ; fi \"",
    "dev:build:install:package:platform:action:heroku:buildpacks:list": "bash ./launch \" heroku buildpacks --remote heroku \"",
    "dev:build:install:package:platform:action:heroku:buildpacks:google-chrome": "bash ./launch \" heroku buildpacks:add -i 1 heroku/google-chrome -a cv-generator-fe \"",
    "dev:build:install:package:platform:action:heroku:buildpacks:metrics": "bash ./launch \" heroku buildpacks:add -i 2 heroku/metrics -a cv-generator-fe \"",
    "dev:build:install:package:platform:action:heroku:buildpacks:datadog": "bash ./launch \" heroku buildpacks:add -i 3 https://github.com/DataDog/heroku-buildpack-datadog.git -a cv-generator-fe \"",
    "dev:build:install:package:platform:action:heroku:buildpacks:nodejs": "bash ./launch \" heroku buildpacks:add -i 4 heroku/nodejs -a cv-generator-fe \"",
    "off:dev:build:install:package:platform:action:heroku:buildpacks:prometheus": "bash ./launch \" heroku buildpacks:add -i 5 https://github.com/heroku/heroku-buildpack-prometheus.git -a cv-generator-fe \"",
    "dev:build:install:package:platform:action:heroku:buildpacks:report": "bash ./launch \" npm run dev:build:install:package:platform:action:heroku:buildpacks:list \"",
    "dev:build:install:report:action": "bash ./launch \" npm run ver && echo $'\\033[0;32m'Build: Install: Installed and fixed all dependencies.$'\\033[0m' \"",
    "postinstall": "bash ./launch \" npm audit fix \"",
    "dev:build:build:package:action": "bash ./launch \" if [ \"$CI\" ] ; then npm run build-ci ; else npm run build-prod ; fi \"",
    "build": "bash ./launch \" if [ \"$CI\" ] ; then npm run PIPELINE ; else ng build ; fi \"",
    "build-prod": "bash ./launch \" ng build --configuration production \"",
    "build-ci": "bash ./launch \" ng build --configuration heroku \"",
    "dev:build:build:analyze:action": "bash ./launch \" dev:build:build:analyze:action:* \"",
    "dev:build:build:analyze:action:webpack-bundle-analyzer": "bash ./launch \" ng build --configuration production --stats-json && echo y | npx webpack-bundle-analyzer dist/stats.json \"",
    "dev:build:build:analyze:action:source-map-explorer": "bash ./launch \" ng build --configuration production && echo y | npx source-map-explorer dist/main*.js \"",
    "heroku:builds:cancel": "bash ./launch \" heroku builds:cancel -a cv-generator-fe \"",
    "heroku:builds:cache:purge": "bash ./launch \" heroku builds:cache:purge --confirm cv-generator-fe \"",
    "heroku:clear:cache": "bash ./launch \" heroku config:set NODEMODULESCACHE=false NODE_MODULES_CACHE=false --remote heroku \"",
    "heroku:rebuild": "bash ./launch \" git commit --allow-empty -m \"empty commit\" && git push heroku master \"",
    "heroku:up": "bash ./launch \" npm-run-all heroku:status:scale:on heroku:status:maintenance:off heroku:status-each \"",
    "heroku:down": "bash ./launch \" npm-run-all heroku:status:maintenance:on heroku:status:scale:off heroku:status-each \"",
    "heroku:restart": "bash ./launch \" npm-run-all heroku:down heroku:up \"",
    "heroku:status-each": "bash ./launch \" for app in cv-generator-fe-eu cv-generator-fe; do echo -e '\\n'\\$app:; echo -e '\\tmaintenance:\\t'\\$(heroku maintenance -a \\$app 2>/dev/null); echo -e '\\tscale:\\t\\t'\\$(heroku scale -a \\$app 2>/dev/null); done \"",
    "heroku:status": "bash ./launch \" npm-run-all heroku:status:* \"",
    "heroku:status:maintenance": "bash ./launch \" for app in cv-generator-fe-eu cv-generator-fe; do echo -e '\\n'\\$app:; echo -e '\\tmaintenance:\\t'\\$(heroku maintenance -a \\$app 2>/dev/null); done \"",
    "heroku:status:maintenance:on": "bash ./launch \" for app in cv-generator-fe-eu cv-generator-fe; do echo -e '\\n'\\$app:; heroku maintenance:on -a \\$app 2>/dev/null; echo -e '\\tmaintenance:\\t'\\$(heroku maintenance -a \\$app 2>/dev/null); done \"",
    "heroku:status:maintenance:off": "bash ./launch \" for app in cv-generator-fe-eu cv-generator-fe; do echo -e '\\n'\\$app:; heroku maintenance:off -a \\$app 2>/dev/null; echo -e '\\tmaintenance:\\t'\\$(heroku maintenance -a \\$app 2>/dev/null); done \"",
    "heroku:status:scale": "bash ./launch \" for app in cv-generator-fe-eu cv-generator-fe; do echo -e '\\n'\\$app:; echo -e '\\tscale:\\t\\t'\\$(heroku scale -a \\$app 2>/dev/null); done \"",
    "heroku:status:scale:on": "bash ./launch \" for app in cv-generator-fe-eu cv-generator-fe; do echo -e '\\n'\\$app:; heroku scale web=1 -a \\$app 2>/dev/null; echo -e '\\tscale:\\t\\t'\\$(heroku scale -a \\$app 2>/dev/null); done \"",
    "heroku:status:scale:off": "bash ./launch \" for app in cv-generator-fe-eu cv-generator-fe; do echo -e '\\n'\\$app:; heroku scale web=0 -a \\$app 2>/dev/null; echo -e '\\tscale:\\t\\t'\\$(heroku scale -a \\$app 2>/dev/null); done \"",
    "dev:build:build:report:action": "bash ./launch \" echo $'\\033[0;32m'Build: Built everything.$'\\033[0m' \"",
    "dev:build:report:action": "bash ./launch \" npm-run-all dev:build:report:action:* \"",
    "dev:build:report:action:report": "bash ./launch \" echo $'\\033[0;32m'BUILD: Built everything.$'\\033[0m' \"",
    "dev:build:report:action:shout": "bash ./launch \" echo && figlet -f Banner BUILD: all done | sed $'s/#/\\033[0;42m \\033[m/g' && echo $'\\033[0m' \"",
    "// TEST": ":",
    "dev:test:test:package:vulnerability:action": "bash ./launch \" npm-run-all vulnerability-check \"",
    "vulnerability-check": "bash ./launch \" if [ \"$(date +%H%M)\" -gt 2100 -a \"$(date +%H%M)\" -lt 2200 ]; then npx snyk test --all-projects -d ; else echo Skipping Snyk test. ; fi \"",
    "dev:test:test:package:unit:action": "bash ./launch \" npm-run-all test-once \"",
    "test-once": "bash ./launch \" singleRun=true ng test --code-coverage --watch=false \"",
    "test": "bash ./launch \" if [ ! \"$TRAVIS\" ] && [ ! \"$HEROKU\" ] ; then ng test --code-coverage ; fi \"",
    "dev:test:test:measure:action": "bash ./launch \" npm-run-all measure:* \"",
    "measure:static": "bash ./launch \" npm-run-all lint \"",
    "lint": "bash ./launch \" ng  lint \"",
    "measure:prepare": "bash ./launch \" npm-run-all measure:prepare:* \"",
    "measure:prepare:package": "bash ./launch \" npm-run-all dev:test:integrate:package:action \"",
    "measure:lighthouse": "bash ./launch \" npm-run-all measure:lighthouse:* \"",
    "measure:lighthouse:run": "bash ./launch \" if [ \"$CI\" ] ; then npm-run-all measure:lighthouse:run:local:silent ; else npm-run-all measure:lighthouse:run:local ; fi \"",
    "measure:lighthouse:run:remote": "bash ./launch \" CV_GENERATOR_AUDITING=true lighthouse https://cv-generator-fe-eu.herokuapp.com/ --output-path=./logs/lighthouse-results/lighthouse.report.html --preset=desktop --throttling.cpuSlowdownMultiplier=0.8 --skip-audits=dom-size,unsized-images,valid-source-maps,aria-allowed-attr,color-contrast,crawlable-anchors,tap-targets --max-wait-for-load=120000 --view && unset CV_GENERATOR_AUDITING \"",
    "measure:lighthouse:run:remote:silent": "bash ./launch \" CV_GENERATOR_AUDITING=true lighthouse https://cv-generator-fe-eu.herokuapp.com/ --output-path=./logs/lighthouse-results/lighthouse.report.html --preset=desktop --throttling.cpuSlowdownMultiplier=0.8 --skip-audits=dom-size,unsized-images,valid-source-maps,aria-allowed-attr,color-contrast,crawlable-anchors,tap-targets --max-wait-for-load=120000 && unset CV_GENERATOR_AUDITING \"",
    "measure:lighthouse:run:local": "bash ./launch \" CV_GENERATOR_AUDITING=true lighthouse http://localhost:5000/ --output-path=./logs/lighthouse-results/lighthouse.report.html --preset=desktop --throttling.cpuSlowdownMultiplier=0.8 --skip-audits=dom-size,unsized-images,valid-source-maps,aria-allowed-attr,color-contrast,crawlable-anchors,tap-targets --max-wait-for-load=120000 --view && unset CV_GENERATOR_AUDITING \"",
    "measure:lighthouse:run:local:silent": "bash ./launch \" CV_GENERATOR_AUDITING=true lighthouse http://localhost:5000/ --output-path=./logs/lighthouse-results/lighthouse.report.html --preset=desktop --throttling.cpuSlowdownMultiplier=0.8 --skip-audits=dom-size,unsized-images,valid-source-maps,aria-allowed-attr,color-contrast,crawlable-anchors,tap-targets --max-wait-for-load=120000 && unset CV_GENERATOR_AUDITING \"",
    "measure:lighthouse-badges": "bash ./launch \" npm-run-all measure:lighthouse-badges:* \"",
    "off:measure:lighthouse-badges:prepare-patch": "bash ./launch \" cp patch/lighthouse-badges.js node_modules/lighthouse-badges/src/lighthouse-badges.js \"",
    "measure:lighthouse-badges:run": "bash ./launch \" if [ \"$CI\" ] ; then npm-run-all measure:lighthouse-badges:run:remote:silent ; else npm-run-all measure:lighthouse-badges:run:remote ; fi \"",
    "measure:lighthouse-badges:run:remote": "bash ./launch \" CV_GENERATOR_AUDITING=true LIGHTHOUSE_BADGES_PARAMS=\\\"--preset=desktop --throttling.cpuSlowdownMultiplier=0.8 --skip-audits=dom-size,unsized-images,valid-source-maps,aria-allowed-attr,color-contrast,crawlable-anchors,tap-targets --max-wait-for-load=120000 --view\\\" lighthouse-badges --urls https://cv-generator-fe-eu.herokuapp.com/ --output-path logs/lighthouse-results && unset CV_GENERATOR_AUDITING \"",
    "measure:lighthouse-badges:run:remote:silent": "bash ./launch \" CV_GENERATOR_AUDITING=true LIGHTHOUSE_BADGES_PARAMS=\\\"--preset=desktop --throttling.cpuSlowdownMultiplier=0.8 --skip-audits=dom-size,unsized-images,valid-source-maps,aria-allowed-attr,color-contrast,crawlable-anchors,tap-targets --max-wait-for-load=120000\\\" lighthouse-badges --urls https://cv-generator-fe-eu.herokuapp.com/ --output-path logs/lighthouse-results && unset CV_GENERATOR_AUDITING \"",
    "measure:lighthouse-badges:run:local": "bash ./launch \" CV_GENERATOR_AUDITING=true LIGHTHOUSE_BADGES_PARAMS=\\\"--preset=desktop --throttling.cpuSlowdownMultiplier=0.8 --skip-audits=dom-size,unsized-images,valid-source-maps,aria-allowed-attr,color-contrast,crawlable-anchors,tap-targets --max-wait-for-load=120000 --view\\\" lighthouse-badges --urls http://localhost:5000/ --output-path logs/lighthouse-results && unset CV_GENERATOR_AUDITING \"",
    "measure:lighthouse-badges:run:local:silent": "bash ./launch \" CV_GENERATOR_AUDITING=true LIGHTHOUSE_BADGES_PARAMS=\\\"--preset=desktop --throttling.cpuSlowdownMultiplier=0.8 --skip-audits=dom-size,unsized-images,valid-source-maps,aria-allowed-attr,color-contrast,crawlable-anchors,tap-targets --max-wait-for-load=120000\\\" lighthouse-badges --urls http://localhost:5000/ --output-path logs/lighthouse-results && unset CV_GENERATOR_AUDITING \"",
    "measure:lighthouse-badges:run:local:silent:valid-source-maps": "bash ./launch \" CV_GENERATOR_AUDITING=true LIGHTHOUSE_BADGES_PARAMS=\\\"--preset=desktop --throttling.cpuSlowdownMultiplier=0.8 --only-audits=valid-source-maps --max-wait-for-load=120000\\\" lighthouse-badges --urls http://localhost:5000/ --output-path logs/lighthouse-results && unset CV_GENERATOR_AUDITING \"",
    "measure:lighthouse-badges:run:local:silent:crawlable-anchors": "bash ./launch \" CV_GENERATOR_AUDITING=true LIGHTHOUSE_BADGES_PARAMS=\\\"--preset=desktop --throttling.cpuSlowdownMultiplier=0.8 --only-audits=crawlable-anchors --max-wait-for-load=120000\\\" lighthouse-badges --urls http://localhost:5000/ --output-path logs/lighthouse-results && unset CV_GENERATOR_AUDITING \"",
    "measure:lighthouse-badges:run:local:silent:tap-targets": "bash ./launch \" CV_GENERATOR_AUDITING=true LIGHTHOUSE_BADGES_PARAMS=\\\"--preset=desktop --throttling.cpuSlowdownMultiplier=0.8 --only-audits=tap-targets --max-wait-for-load=120000\\\" lighthouse-badges --urls http://localhost:5000/ --output-path logs/lighthouse-results && unset CV_GENERATOR_AUDITING \"",
    "measure:lighthouse-badges:run:local:silent:all": "bash ./launch \" CV_GENERATOR_AUDITING=true LIGHTHOUSE_BADGES_PARAMS=\\\"--preset=desktop --throttling.cpuSlowdownMultiplier=0.8 --max-wait-for-load=120000\\\" lighthouse-badges --urls http://localhost:5000/ --output-path logs/lighthouse-results && unset CV_GENERATOR_AUDITING \"",
    "measure:coverity": "bash ./launch \" if [ ! \"$CI\" ] ; then npm-run-all measure:coverity:* ; fi \"",
    "measure:coverity:run": "bash ./launch \" cov-build --dir coverity/cov-int --no-command --fs-capture-search ./src/ \"",
    "measure:coverity:package": "bash ./launch \" tar czvfC coverity/cv-generator-fe.tgz coverity/ cov-int \"",
    "measure:coverity:upload-results": "bash ./launch \" curl --form token=X4ThO0kuZRFP-srBfqEGjw --form email=yrkki@yahoo.com --form file=@coverity/cv-generator-fe.tgz --form version=\\\"1.46.0\\\" --form description=\\\"Version 1.46.0\\\" https://scan.coverity.com/builds?project=Yrkki%2Fcv-generator-fe \"",
    "dev:test:codecover:package:action": "bash ./launch \" npm-run-all coverage:* \"",
    "coverage": "bash ./launch \" npm-run-all coverage:* \"",
    "coverage:codecov": "bash ./launch \" npm-run-all coverage:codecov:* \"",
    "coverage:codecov:env": "bash ./launch \" bash <(curl -s https://codecov.io/env) \"",
    "coverage:codecov:method1": "bash ./launch \" if [ \"$APPVEYOR\" ] ; then codecov ; fi \"",
    "coverage:codecov:method2": "bash ./launch \" if [ ! \"$APPVEYOR\" ] ; then bash <(curl -s https://codecov.io/bash) ; fi \"",
    "coverage:coveralls": "bash ./launch \" node ./node_modules/coveralls/bin/coveralls.js < ./coverage/lcov.info \"",
    "coverage:codacy": "bash ./launch \" cd coverage && bash <(curl -Ls https://coverage.codacy.com/get.sh) \"",
    "coverage:codacy-final": "bash ./launch \" cd coverage && bash <(curl -Ls https://coverage.codacy.com/get.sh) final \"",
    "dev:test:document:package:action": "bash ./launch \" npm-run-all compodoc \"",
    "compodoc": "bash ./launch \" compodoc -p tsconfig.compodoc.json --theme vagrant --hideGenerator --disableSourceCode --disablePrivate --disableTemplateTab --customFavicon \\\"./src/assets/icons/android-chrome-512x512.png\\\" -n \\\"CV Generator Documentation\\\" \"",
    "dev:test:integrate:package:action": "bash ./launch \" npm-run-all copy:* \"",
    "copy:ngsw": "bash ./launch \" npm-run-all copy:ngsw:* \"",
    "copy:ngsw:config": "bash ./launch \" if [ \"$production\" ] ; then node_modules/.bin/ngsw-config dist ngsw-config.json ; fi \"",
    "copy:ngsw:copy": "bash ./launch \" if [ \"$production\" ] ; then cp node_modules/@angular/service-worker/ngsw-worker.js dist/ ; fi \"",
    "copy:assets": "bash ./launch \" cp -r src/assets/. dist/assets/ \"",
    "copy:google": "bash ./launch \" cp -r src/google/. dist/ \"",
    "copy:manifest": "bash ./launch \" cp src/manifest.webmanifest dist/ \"",
    "copy:cov": "bash ./launch \" cp -r coverage/. dist/coverage/ \"",
    "copy:doc": "bash ./launch \" cp -r documentation/. dist/documentation/ \"",
    "copy:logs": "bash ./launch \" cp -r logs/. dist/logs/ \"",
    "dev:test:integrate:test:action": "bash ./launch \" npm-run-all e2e \"",
    "e2e": "bash ./launch \" if [ ! \"$HEROKU\" ] ; then if [ \"$CI\" ] ; then ng e2e ; else echo y | ng e2e ; fi ; fi \"",
    "dev:test:iac:test:action": "bash ./launch \" npm-run-all dev:test:iac:test:action:* \"",
    "off:dev:test:iac:test:action:install": "bash ./launch \" npm-run-all dev:test:iac:test:action:version && pip3 install checkov \"",
    "off:dev:test:iac:test:action:update": "bash ./launch \" npm-run-all dev:test:iac:test:action:version && pip3 install -U checkov \"",
    "dev:test:iac:test:action:version": "bash ./launch \" checkov -v \"",
    "dev:test:iac:test:action:config": "bash ./launch \" checkov --show-config \"",
    "dev:test:iac:test:action:run": "bash ./launch \" checkov \"",
    "dev:test:report:action": "bash ./launch \" npm-run-all dev:test:report:action:* \"",
    "dev:test:report:action:report": "bash ./launch \" echo $'\\033[0;32m'TEST: Tested everything.$'\\033[0m' \"",
    "dev:test:report:action:shout": "bash ./launch \" echo && figlet -f Banner TEST: all done | sed $'s/#/\\033[0;42m \\033[m/g' && echo $'\\033[0m' \"",
    "// RELEASE": ":",
    "ops:release:package:action": "bash ./launch \" npm run semantic-release \"",
    "semantic-release": "bash ./launch \" npx semantic-release \"",
    "semantic-release-no-ci": "bash ./launch \" npx semantic-release --no-ci \"",
    "bump": "bash ./launch \" npm run bump-patch \"",
    "bump-patch": "bash ./launch \" npm --no-git-tag-version version patch \"",
    "bump-minor": "bash ./launch \" npm --no-git-tag-version version minor \"",
    "bump-major": "bash ./launch \" npm --no-git-tag-version version major \"",
    "version": "bash ./launch \" auto-changelog -p \"",
    "ops:release:report:action": "bash ./launch \" npm-run-all ops:release:report:action:* \"",
    "ops:release:report:action:report": "bash ./launch \" echo $'\\033[0;32m'RELEASE: Released everything. New version released: $'\\033[0;32m'v$npm_package_version$'\\033[0m' \"",
    "ops:release:report:action:shout": "bash ./launch \" echo && figlet -f Banner RELEASE: all done | sed $'s/#/\\033[0;42m \\033[m/g' && echo $'\\033[0m' \"",
    "// DEPLOY": ":",
    "ops:deploy:package:dockerize:build:action": "bash ./launch \" npm-run-all dockerize-build \"",
    "dockerize-build": "bash ./launch \" docker image build -t jorich/cv-generator-fe:$npm_package_version -t jorich/cv-generator-fe . \"",
    "ops:deploy:package:dockerize:push:action": "bash ./launch \" npm-run-all dockerize-auth dockerize-push \"",
    "dockerize-auth": "bash ./launch \" echo \\\"$CV_GENERATOR_DOCKER_TOKEN\\\" | docker login -u \\\"$CV_GENERATOR_DOCKER_USERNAME\\\" --password-stdin \"",
    "dockerize-push": "bash ./launch \" docker push jorich/cv-generator-fe:$npm_package_version && docker push jorich/cv-generator-fe:latest \"",
    "ops:deploy:package:provision:action": "bash ./launch \" echo npm-run-all provision \"",
    "provision": "bash ./launch \" cd ../cv-generator-life-terraform && terraform apply \"",
    "ops:deploy:package:test:sec:action": "bash ./launch \" npm-run-all test-sec \"",
    "test-sec": "bash ./launch \" npm-run-all test-sec:* \"",
    "test-sec:cert": "bash ./launch \" heroku certs \"",
    "test-sec:headers": "bash ./launch \" curl -I https://cv-generator-fe-eu.herokuapp.com \"",
    "test-sec:handshake": "bash ./launch \" curl -vI https://cv-generator-fe-eu.herokuapp.com \"",
    "ops:deploy:report:action": "bash ./launch \" npm-run-all ops:deploy:report:action:* \"",
    "ops:deploy:report:action:report": "bash ./launch \" echo $'\\033[0;32m'DEPLOY: Deployed everything.$'\\033[0m' \"",
    "ops:deploy:report:action:shout": "bash ./launch \" echo && figlet -f Banner DEPLOY: all done | sed $'s/#/\\033[0;42m \\033[m/g' && echo $'\\033[0m' \"",
    "// OPERATE": ":",
    "ops:run:platform:action": "bash ./launch \" npm-run-all wake-up-the-dynos:* \"",
    "wake-up-the-dynos:heroku": "bash ./launch \" if [ ! \"$HEROKU\" ] ; then curl https://cv-generator-fe-eu.herokuapp.com/webpage ; fi \"",
    "off:wake-up-the-dynos:tk": "bash ./launch \" if [ ! \"$CI\" ] ; then curl cvgenerator.marinov.link ; fi \"",
    "wake-up-the-dynos:ml": "bash ./launch \" if [ ! \"$CI\" ] ; then curl cvgenerator.marinov.link ; fi \"",
    "start": "bash ./launch \" npm-run-all start:n-monitor:node \"",
    "start:n-monitor:node": "bash ./launch \" npm-run-all --parallel start:node off:trace:performance:prometheus:serve \"",
    "start:n-monitor:ng": "bash ./launch \" npm-run-all --parallel start:ng off:trace:performance:prometheus:serve \"",
    "start:node": "bash ./launch \" node server.js \"",
    "start:ng": "bash ./launch \" ng serve \"",
    "start:ng:prod": "bash ./launch \" npm-run-all serve-prod \"",
    "start:ng:ci": "bash ./launch \" npm-run-all serve-ci \"",
    "start:remote": "bash ./launch \" npm-run-all start:ng:prod \"",
    "serve": "bash ./launch \" if [ -f \\\"server.js\\\" ] ; then npm-run-all start:n-monitor:node ; else npm-run-all start:n-monitor:ng ; fi \"",
    "serve-prod": "bash ./launch \" ng serve --configuration production \"",
    "serve-ci": "bash ./launch \" ng serve --configuration heroku \"",
    "open": "bash ./launch \" npm-run-all open:local \"",
    "open:remote": "bash ./launch \" if [ -f \\\"server.js\\\" ] ; then node server.js -o https://cv-generator-fe-eu.herokuapp.com/ ; else ng serve --open=true ; fi \"",
    "open:local": "bash ./launch \" if [ -f \\\"server.js\\\" ] ; then node server.js -o http://localhost:5000 ; else ng serve --open=true ; fi \"",
    "ops:run:report:action": "bash ./launch \" npm-run-all ops:run:report:action:* \"",
    "ops:run:report:action:report": "bash ./launch \" echo $'\\033[0;32m'OPERATE: Ran everything.$'\\033[0m' \"",
    "ops:run:report:action:shout": "bash ./launch \" echo && figlet -f Banner OPERATE: all done | sed $'s/#/\\033[0;42m \\033[m/g' && echo $'\\033[0m' \"",
    "// MONITOR": ":",
    "ops:monitor:package:trace:performance:action": "bash ./launch \" if [ ! \"$CI\" ] ; then npm-run-all trace:performance:* ; fi \"",
    "trace:performance:prometheus": "bash ./launch \" npm-run-all trace:performance:prometheus:* \"",
    "trace:performance:prometheus:drains": ":",
    "off:trace:performance:prometheus:serve": "bash ./launch \" if [ \"$CI\" ] ; then npm-run-all off:trace:performance:prometheus:serve:remote ; else npm-run-all off:trace:performance:prometheus:serve:local ; fi \"",
    "off:trace:performance:prometheus:serve:remote": "bash ./launch \" npm-run-all off:trace:performance:prometheus:serve:remote:* \"",
    "off:trace:performance:prometheus:serve:remote:download-linux": "bash ./launch \" wget https://github.com/prometheus/prometheus/releases/download/v2.37.5/prometheus-2.37.5.linux-amd64.tar.gz \"",
    "off:trace:performance:prometheus:serve:remote:unzip": "bash ./launch \" tar xvfz prometheus-*.tar.gz \"",
    "off:trace:performance:prometheus:serve:remote:cleanup-download": "bash ./launch \" rm prometheus-2.37.5.linux-amd64.tar.gz \"",
    "off:trace:performance:prometheus:serve:remote:launch": "bash ./launch \" ./prometheus-*/prometheus  --web.enable-lifecycle \"",
    "off:off:trace:performance:prometheus:serve:remote:prometheus": "bash ./launch \" prometheus  --web.enable-lifecycle \"",
    "off:trace:performance:prometheus:serve:local": "bash ./launch \" prometheus  --web.enable-lifecycle \"",
    "trace:performance:prometheus:open": "bash ./launch \" npm-run-all trace:performance:prometheus:open:local \"",
    "trace:performance:prometheus:open:remote": "bash ./launch \" npm-run-all --parallel trace:performance:prometheus:open:remote:* \"",
    "trace:performance:prometheus:open:remote:open": "bash ./launch \" start http://cv-generator-fe-eu.herokuapp.com:9090/graph?g0.expr=scrape_duration_seconds\\&g0.tab=0\\&g0.stacked=0\\&g0.range_input=3h \"",
    "trace:performance:prometheus:open:remote:trace": "bash ./launch \" npm-run-all off:trace:performance:prometheus:serve \"",
    "trace:performance:prometheus:open:local": "bash ./launch \" npm-run-all --parallel trace:performance:prometheus:open:local:* \"",
    "trace:performance:prometheus:open:local:open": "bash ./launch \" start http://localhost:9090/graph?g0.expr=scrape_duration_seconds\\&g0.tab=0\\&g0.stacked=0\\&g0.range_input=3h\\&g1.expr=go_memstats_alloc_bytes\\&g1.tab=0\\&g1.stacked=0\\&g1.range_input=3h\\&g2.expr=go_memstats_alloc_bytes\\&g2.tab=0\\&g2.stacked=0\\&g2.range_input=1m \"",
    "trace:performance:prometheus:open:local:trace": "bash ./launch \" npm-run-all off:trace:performance:prometheus:serve \"",
    "trace:performance:papertrail": "bash ./launch \" npm-run-all trace:performance:papertrail:* \"",
    "trace:performance:papertrail:drains": "bash ./launch \" npm-run-all trace:performance:papertrail:drains:* \"",
    "off:trace:performance:papertrail:drains:add": "bash ./launch \" heroku drains:add syslog+tls://logs5.papertrailapp.com:39476 --remote heroku \"",
    "off:trace:performance:papertrail:drains:remove": "bash ./launch \" heroku drains:remove syslog+tls://logs5.papertrailapp.com:39476 --remote heroku \"",
    "trace:performance:papertrail:drains:list": "bash ./launch \" echo cv-generator-fe && heroku drains --app cv-generator-fe \"",
    "off:trace:performance:papertrail:drains:add-searches": "curl -G -v -H \"X-Papertrail-Token: VCBf18EXlT1gO9dMc9bh\" -X POST https://papertrailapp.com/api/v1/searches.json --data-urlencode 'search[name]=cv-generator-fe: Platform errors' --data-urlencode 'search[query]=\"error code=H\" OR \"Error R\" OR \"Error L\"' && curl -G -v -H \"X-Papertrail-Token: VCBf18EXlT1gO9dMc9bh\" -X POST https://papertrailapp.com/api/v1/searches.json --data-urlencode 'search[name]=cv-generator-fe: Deploys' --data-urlencode 'search[query]=program:app/api -scheduler' && curl -G -v -H \"X-Papertrail-Token: VCBf18EXlT1gO9dMc9bh\" -X POST https://papertrailapp.com/api/v1/searches.json --data-urlencode 'search[name]=cv-generator-fe: Scheduler jobs' --data-urlencode 'search[query]=program:scheduler' && curl -G -v -H \"X-Papertrail-Token: VCBf18EXlT1gO9dMc9bh\" -X POST https://papertrailapp.com/api/v1/searches.json --data-urlencode 'search[name]=cv-generator-fe: Dyno state changes' --data-urlencode 'search[query]=web (Idling OR Unidling OR Cycling OR \"State changed\" OR \"Starting process\")' && curl -G -v -H \"X-Papertrail-Token: VCBf18EXlT1gO9dMc9bh\" -X POST https://papertrailapp.com/api/v1/searches.json --data-urlencode 'search[name]=cv-generator-fe: Web app output' --data-urlencode 'search[query]=\"app/web\"'",
    "trace:performance:papertrail:open": "bash ./launch \" start https://my.papertrailapp.com/systems/cv-generator-fe/events \"",
    "ops:monitor:package:showcase:action": "bash ./launch \" if [ ! \"$CI\" ] ; then npm-run-all showcase:* ; fi \"",
    "showcase:new-relic-one": "bash ./launch \" npm-run-all showcase:new-relic-one:* \"",
    "showcase:new-relic-one:open": "bash ./launch \" start https://one.eu.newrelic.com/launcher/nr1-core.explorer?pane=eyJuZXJkbGV0SWQiOiJhcG0tbmVyZGxldHMub3ZlcnZpZXciLCJpc092ZXJ2aWV3Ijp0cnVlLCJlbnRpdHlJZCI6Ik1qYzBNak0zTVh4QlVFMThRVkJRVEVsRFFWUkpUMDU4TlRNek5Ua3hOVGsifQ==&sidebars[0]=eyJuZXJkbGV0SWQiOiJucjEtY29yZS5hY3Rpb25zIiwiZW50aXR5SWQiOiJNamMwTWpNM01YeEJVRTE4UVZCUVRFbERRVlJKVDA1OE5UTXpOVGt4TlRrIiwic2VsZWN0ZWROZXJkbGV0Ijp7Im5lcmRsZXRJZCI6ImFwbS1uZXJkbGV0cy5vdmVydmlldyIsImlzT3ZlcnZpZXciOnRydWV9fQ==&platform[timeRange][duration]=1800000 \"",
    "showcase:new-relic": "bash ./launch \" npm-run-all showcase:new-relic:* \"",
    "showcase:new-relic:open": "bash ./launch \" start https://rpm.eu.newrelic.com/accounts/2742371/applications/53359159 \"",
    "showcase:grafana": "bash ./launch \" npm-run-all showcase:grafana:* \"",
    "showcase:grafana:open": "bash ./launch \" npm-run-all showcase:grafana:open:remote \"",
    "showcase:grafana:open:remote": "bash ./launch \" start https://yrkki.grafana.net/d/gDZlQI4Gz/cv-generator?orgId=1\\&refresh=5s\\&from=now-3h\\&to=now\\&kiosk \"",
    "showcase:grafana:open:local": "bash ./launch \" docker run -p 3800:3000 grafana/grafana \"",
    "ops:monitor:report:action": "bash ./launch \" npm-run-all ops:monitor:report:action:* \"",
    "ops:monitor:report:action:report": "bash ./launch \" echo $'\\033[0;32m'MONITOR: Monitoring everything. Observability dashboards launched.$'\\033[0m' \"",
    "ops:monitor:report:action:shout": "bash ./launch \" echo && figlet -f Banner MONITOR: all done | sed $'s/#/\\033[0;42m \\033[m/g' && echo $'\\033[0m' \"",
    "// PIPELINE:finish": ":",
    "pipeline:finish:action": "bash ./launch \" npm-run-all pipeline:finish:action:* \"",
    "pipeline:finish:action:copy-logs": "bash ./launch \" npm-run-all copy:logs \"",
    "pipeline:finish:action:report": "bash ./launch \" echo $'\\033[0;32m'CI/CD pipeline FINISH$'\\033[0m' \"",
    "pipeline:finish:action:shout": "bash ./launch \" echo && figlet -f Banner CI/CD pipeline FINISH | sed $'s/#/\\033[0;42m \\033[m/g' && echo $'\\033[0m' \"",
    "PIPELINE": "bash ./launch \" mkdir -p ./logs && npm-run-all pipeline:start dev ops pipeline:finish 2>&1 | tee ./logs/pipeline.txt \"",
    "pipeline:start": "bash ./launch \" mkdir -p ./logs && npm-run-all pipeline:start:action 2>&1 | tee ./logs/pipeline_start.txt \"",
    "dev": "bash ./launch \" mkdir -p ./logs && npm-run-all dev:* 2>&1 | tee ./logs/dev.txt \"",
    "dev:plan": "bash ./launch \" mkdir -p ./logs && npm-run-all dev:plan:* 2>&1 | tee ./logs/dev_plan.txt \"",
    "dev:plan:plan": "bash ./launch \" npm-run-all dev:plan:plan:* \"",
    "dev:plan:plan:report": "bash ./launch \" npm-run-all dev:plan:plan:report:action \"",
    "dev:plan:update": "bash ./launch \" npm-run-all dev:plan:update:* \"",
    "dev:plan:update:report": "bash ./launch \" npm-run-all dev:plan:update:report:action \"",
    "dev:plan:report": "bash ./launch \" npm-run-all dev:plan:report:action \"",
    "dev:code": "bash ./launch \" mkdir -p ./logs && npm-run-all dev:code:* 2>&1 | tee ./logs/dev_code.txt \"",
    "dev:code:scaffold": "bash ./launch \" npm-run-all dev:code:scaffold:* \"",
    "dev:code:scaffold:generate": "bash ./launch \" npm-run-all dev:code:scaffold:generate:action \"",
    "dev:code:scaffold:transform": "bash ./launch \" npm-run-all dev:code:scaffold:transform:action \"",
    "dev:code:scaffold:launch": "bash ./launch \" npm-run-all dev:code:scaffold:launch:action \"",
    "dev:code:rejuvenate": "bash ./launch \" npm-run-all dev:code:rejuvenate:action \"",
    "dev:code:code": "bash ./launch \" npm-run-all dev:code:code:action \"",
    "dev:code:report": "bash ./launch \" npm-run-all dev:code:report:action \"",
    "dev:build": "bash ./launch \" mkdir -p ./logs && npm-run-all dev:build:* 2>&1 | tee ./logs/dev_build.txt \"",
    "dev:build:install": "bash ./launch \" npm-run-all dev:build:install:* \"",
    "dev:build:install:prepare": "bash ./launch \" npm-run-all dev:build:install:prepare:action \"",
    "dev:build:install:package": "bash ./launch \" npm-run-all dev:build:install:package:* \"",
    "dev:build:install:package:environment": ":",
    "dev:build:install:package:package": "bash ./launch \" npm-run-all dev:build:install:package:package:action \"",
    "dev:build:install:package:platform": "bash ./launch \" npm-run-all dev:build:install:package:platform:action \"",
    "dev:build:install:report": "bash ./launch \" npm-run-all dev:build:install:report:action \"",
    "dev:build:build": "bash ./launch \" npm-run-all dev:build:build:* \"",
    "dev:build:build:package": "bash ./launch \" npm-run-all dev:build:build:package:action \"",
    "dev:build:build:report": "bash ./launch \" npm-run-all dev:build:build:report:action \"",
    "dev:build:report": "bash ./launch \" npm-run-all dev:build:report:action \"",
    "dev:test": "bash ./launch \" mkdir -p ./logs && npm-run-all dev:test:* 2>&1 | tee ./logs/dev_test.txt \"",
    "dev:test:test": "bash ./launch \" npm-run-all dev:test:test:* \"",
    "dev:test:test:package": "bash ./launch \" npm-run-all dev:test:test:package:* \"",
    "dev:test:test:package:vulnerability": "bash ./launch \" npm-run-all dev:test:test:package:vulnerability:action \"",
    "dev:test:test:package:unit": "bash ./launch \" npm-run-all dev:test:test:package:unit:action \"",
    "dev:test:test:package:integration": ":",
    "dev:test:test:measure": "bash ./launch \" npm-run-all dev:test:test:measure:action \"",
    "dev:test:test:report": ":",
    "dev:test:codecover": "bash ./launch \" npm-run-all dev:test:codecover:* \"",
    "dev:test:codecover:package": "bash ./launch \" npm-run-all dev:test:codecover:package:action \"",
    "dev:test:codecover:report": ":",
    "dev:test:document": "bash ./launch \" npm-run-all dev:test:document:* \"",
    "dev:test:document:package": "bash ./launch \" npm-run-all dev:test:document:package:action \"",
    "dev:test:document:report": ":",
    "dev:test:integrate": "bash ./launch \" npm-run-all dev:test:integrate:* \"",
    "dev:test:integrate:package": "bash ./launch \" npm-run-all dev:test:integrate:package:action \"",
    "dev:test:integrate:copy": ":",
    "dev:test:integrate:test": "bash ./launch \" npm-run-all dev:test:integrate:test:action \"",
    "dev:test:integrate:report": ":",
    "dev:test:iac": "bash ./launch \" npm-run-all dev:test:iac:* \"",
    "dev:test:iac:test": "bash ./launch \" npm-run-all dev:test:iac:test:action \"",
    "dev:test:iac:report": ":",
    "dev:test:report": "bash ./launch \" npm-run-all dev:test:report:action \"",
    "dev:report": ":",
    "ops": "bash ./launch \" mkdir -p ./logs && npm-run-all ops:* 2>&1 | tee ./logs/ops.txt \"",
    "ops:release": "bash ./launch \" mkdir -p ./logs && npm-run-all ops:release:* 2>&1 | tee ./logs/ops_release.txt \"",
    "ops:release:package": "bash ./launch \" npm-run-all ops:release:package:action \"",
    "ops:release:report": "bash ./launch \" npm-run-all ops:release:report:action \"",
    "ops:deploy": "bash ./launch \" mkdir -p ./logs && npm-run-all ops:deploy:* 2>&1 | tee ./logs/ops_deploy.txt \"",
    "ops:deploy:package": "bash ./launch \" npm-run-all ops:deploy:package:* \"",
    "ops:deploy:package:dockerize": "bash ./launch \" npm-run-all ops:deploy:package:dockerize:* \"",
    "ops:deploy:package:dockerize:build": "bash ./launch \" npm-run-all ops:deploy:package:dockerize:build:action \"",
    "ops:deploy:package:dockerize:push": "bash ./launch \" npm-run-all ops:deploy:package:dockerize:push:action \"",
    "ops:deploy:package:provision": "bash ./launch \" npm-run-all ops:deploy:package:provision:action \"",
    "ops:deploy:package:test": "bash ./launch \" npm-run-all ops:deploy:package:test:* \"",
    "ops:deploy:package:test:sec": "bash ./launch \" npm-run-all ops:deploy:package:test:sec:action \"",
    "ops:deploy:package:orchestrate": ":",
    "ops:deploy:report": "bash ./launch \" npm-run-all ops:deploy:report:action \"",
    "ops:run": "bash ./launch \" mkdir -p ./logs && npm-run-all ops:run:* 2>&1 | tee ./logs/ops_run.txt \"",
    "ops:run:platform": "bash ./launch \" npm-run-all ops:run:platform:action \"",
    "ops:run:package": ":",
    "ops:run:chaos": ":",
    "ops:run:report": "bash ./launch \" npm-run-all ops:run:report:action \"",
    "ops:monitor": "bash ./launch \" mkdir -p ./logs && npm-run-all ops:monitor:* 2>&1 | tee ./logs/ops_monitor.txt \"",
    "ops:monitor:platform": ":",
    "ops:monitor:package": "bash ./launch \" npm-run-all ops:monitor:package:* \"",
    "ops:monitor:package:trace": "bash ./launch \" npm-run-all ops:monitor:package:trace:* \"",
    "ops:monitor:package:trace:health": ":",
    "ops:monitor:package:trace:performance": "bash ./launch \" npm-run-all ops:monitor:package:trace:performance:action \"",
    "ops:monitor:package:trace:resilience": ":",
    "ops:monitor:package:trace:security": ":",
    "ops:monitor:package:showcase": "bash ./launch \" npm-run-all ops:monitor:package:showcase:action \"",
    "ops:monitor:report": "bash ./launch \" npm-run-all ops:monitor:report:action \"",
    "ops:report": ":",
    "pipeline:finish": "bash ./launch \" mkdir -p ./logs && npm-run-all pipeline:finish:action 2>&1 | tee ./logs/pipeline_finish.txt \"",
    "// END PIPELINE": ":"
  },
  "main": "src/main.ts",
  "private": false,
  "release": {
    "plugins": [
      [
        "@semantic-release/commit-analyzer",
        {
          "preset": "angular",
          "parserOpts": {
            "noteKeywords": [
              "BREAKING CHANGE",
              "BREAKING CHANGES",
              "BREAKING"
            ]
          }
        }
      ],
      [
        "@semantic-release/release-notes-generator",
        {
          "preset": "angular",
          "parserOpts": {
            "noteKeywords": [
              "BREAKING CHANGE",
              "BREAKING CHANGES",
              "BREAKING"
            ]
          },
          "writerOpts": {
            "commitsSort": [
              "scope",
              "subject"
            ]
          }
        }
      ],
      [
        "@semantic-release/npm",
        {
          "npmPublish": true
        }
      ],
      "@semantic-release/changelog",
      "@semantic-release/git"
    ],
    "branches": [
      "master"
    ]
  },
  "repository": "https://github.com/Yrkki/cv-generator-fe.git",
  "dependencies": {
    "@angular/animations": "^17.1.3",
    "@angular/common": "^17.1.3",
    "@angular/compiler": "^17.1.3",
    "@angular/core": "^17.1.3",
    "@angular/forms": "^17.1.3",
    "@angular/platform-browser": "^17.1.3",
    "@angular/platform-browser-dynamic": "^17.1.3",
    "@angular/platform-server": "^17.1.3",
    "@angular/pwa": "^17.1.3",
    "@angular/router": "^17.1.3",
    "@angular/service-worker": "^17.1.3",
    "@snyk/protect": "^1.1279.0",
    "@tailorbrands/node-exporter-prometheus": "2.0.7",
    "angular-plotly.js": "5.2.2",
    "chart.js": "^4.4.1",
    "compression": "1.7.4",
    "express": "4.18.2",
    "express-rate-limit": "^7.1.5",
    "heroku": "^8.9.0",
    "newrelic": "^11.10.3",
    "npm-run-all": "4.1.5",
    "rxjs": "^7.8.1",
    "spdy": "^4.0.2",
    "tslib": "^2.6.2",
    "zone.js": "^0.14.3"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "^17.1.3",
    "@angular-devkit/core": "^17.1.3",
    "@angular-devkit/schematics": "^17.1.3",
    "@angular-eslint/builder": "^17.2.1",
    "@angular-eslint/eslint-plugin": "^17.2.1",
    "@angular-eslint/eslint-plugin-template": "^17.2.1",
    "@angular-eslint/schematics": "^17.2.1",
    "@angular-eslint/template-parser": "^17.2.1",
    "@angular/cli": "^17.1.3",
    "@angular/compiler-cli": "^17.1.3",
    "@angular/language-service": "^17.1.3",
    "@compodoc/compodoc": "1.1.23",
    "@semantic-release/changelog": "^6.0.3",
    "@semantic-release/commit-analyzer": "^11.1.0",
    "@semantic-release/git": "^10.0.1",
    "@semantic-release/npm": "^11.0.2",
    "@semantic-release/release-notes-generator": "^12.1.0",
    "@szmarczak/http-timer": "5.0.1",
    "@types/chart.js": "2.9.41",
    "@types/jasmine": "5.1.4",
    "@types/jasminewd2": "2.0.13",
    "@types/node": "20.11.17",
    "@types/spdy": "^3.4.9",
    "@typescript-eslint/eslint-plugin": "^7.0.1",
    "@typescript-eslint/parser": "^7.0.1",
    "auto-changelog": "2.4.0",
    "codecov": "3.8.3",
    "conventional-changelog-angular": "^7.0.0",
    "coveralls": "3.1.1",
    "enhanced-resolve": "5.15.0",
    "eslint": "^8.56.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-import": "2.29.1",
    "eslint-plugin-jsdoc": "48.0.6",
    "eslint-plugin-prefer-arrow": "1.2.3",
    "figlet": "^1.7.0",
    "figlet-cli": "^0.1.1",
    "jasmine-core": "^5.1.2",
    "jasmine-spec-reporter": "^7.0.0",
    "karma": "6.4.2",
    "karma-chrome-launcher": "^3.2.0",
    "karma-coverage": "^2.2.1",
    "karma-htmlfile-reporter": "^0.3.8",
    "karma-jasmine": "^5.1.0",
    "karma-jasmine-html-reporter": "2.1.0",
    "karma-source-map-support": "^1.4.0",
    "lighthouse": "^11.5.0",
    "lighthouse-badges": "^1.2.18",
    "prettier": "3.2.5",
    "protractor": "7.0.0",
    "sass": "^1.70.0",
    "semantic-release": "^23.0.2",
    "ts-node": "10.9.2",
    "typescript": "^5.3.3"
  },
  "engines": {
    "node": "^16.13.0 || >=18.10.0 <19",
    "npm": "^6.11.0 || ^7.5.6 || >=8.0.0 <10",
    "yarn": ">= 1.13.0"
  },
  "snyk": true
}
